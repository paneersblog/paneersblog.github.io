{"meta":{"title":"Panner&Emily’s paradise!","subtitle":"","description":"","author":"Paneer & Emily","url":"http://paneersblog.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页暂时无法显示，敬请期待","date":"2022-07-16T09:40:36.163Z","updated":"2022-07-16T09:40:36.163Z","comments":false,"path":"/404.html","permalink":"http://paneersblog.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2022-07-16T07:24:13.799Z","updated":"2022-07-16T06:41:35.977Z","comments":false,"path":"books/index.html","permalink":"http://paneersblog.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-07-16T09:24:08.240Z","updated":"2022-07-16T06:41:35.977Z","comments":false,"path":"categories/index.html","permalink":"http://paneersblog.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2022-02-01T08:46:37.000Z","updated":"2022-07-17T04:35:31.936Z","comments":true,"path":"about/index.html","permalink":"http://paneersblog.github.io/about/index.html","excerpt":"","text":"123456789101112131415很高兴你发现了这里 此博客基于Hexo，主题为pure 主要更新学习笔记、心得体会甚至旅游攻略哦 或者图片分享、壁纸分享也会有的～ 不定期更新～如果你有想法欢迎在本页面评论区留言～或者邮箱 --&gt; panyuhea@gmail.com By Paneer &amp; Emily"},{"title":"Repositories","date":"2022-07-16T09:24:26.605Z","updated":"2022-07-16T06:41:35.978Z","comments":false,"path":"repository/index.html","permalink":"http://paneersblog.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-07-16T07:24:20.674Z","updated":"2022-07-16T06:41:35.978Z","comments":false,"path":"tags/index.html","permalink":"http://paneersblog.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-07-16T06:41:35.977Z","updated":"2022-07-16T06:41:35.977Z","comments":true,"path":"links/index.html","permalink":"http://paneersblog.github.io/links/index.html","excerpt":"","text":""},{"title":"音乐频道","date":"2022-07-19T08:49:46.501Z","updated":"2022-07-19T08:49:46.501Z","comments":true,"path":"playlist/index.html","permalink":"http://paneersblog.github.io/playlist/index.html","excerpt":"","text":""}],"posts":[{"title":"Python入门笔记（九）","slug":"Python入门笔记（九）","date":"2022-07-23T13:30:18.000Z","updated":"2022-07-23T14:18:46.470Z","comments":true,"path":"21165.html","link":"","permalink":"http://paneersblog.github.io/21165.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python 实战练习 题目1:输入一个年份，判断是否为闰年 需求：从键盘获取一个四位的整数年份，判断是否为闰年。 判断条件为：能被4整除但不能被100整除，或者能被400整除 12345year=eval(input(&#x27;请输入需要判断的年份：&#x27;))if (year%4==0 and year%100!=0)or(year%400==0): print(year,&#x27;是闰年&#x27;)else: print(year,&#x27;是平年&#x27;) 题目2:模拟10086的查询功能 需求：输入1，显示当前余额；输入2，显示当前剩余流量，单位为G；输入3，显示当前的剩余通话，单位为分钟；输入0，退出自助查询系统 12345678910111213141516171819answer=&#x27;y&#x27; # 初始化变量while answer==&#x27;y&#x27;: # 条件判断 print(&#x27;-----欢迎使用10086自助查询系统-----&#x27;) print(&#x27;1.显示当前余额；\\n2.显示当前剩余流量；\\n3.显示当前的剩余通话；\\n0.退出自助查询系统&#x27;) choice=input(&#x27;请输入序号来选择对应查询功能&#x27;) if choice==&#x27;1&#x27;: print(&#x27;当前话费余额为 100元&#x27;) elif choice==&#x27;2&#x27;: print(&#x27;当前剩余流量为 128GB&#x27;) elif choice==&#x27;3&#x27;: print(&#x27;当前剩余通话为 500分钟&#x27;) elif choice==&#x27;0&#x27;: print(&#x27;系统退出，感谢您的使用&#x27;) break else: print(&#x27; 您输入的数字无效，请检查后重新输入&#x27;) answer=input(&#x27;您是否还需要继续查询？[y/n]&#x27;)else: print(&#x27;系统退出，感谢您的使用&#x27;) 题目3:使用嵌套循环输出九九乘法表 需求：直角三角形形状的九九乘法表 1234for i in range(1,10): for j in range(1,i+1): print(str(j)+&#x27;*&#x27;+str(i)+&#x27;=&#x27;+str(i*j),end=&#x27;\\t&#x27;) print() 程序流程图用一系列图形、流程线和文字说明描述程序的基本操作和控制流程，它是程序分析和过程描述的最基本方式。流程图的七种基本元素如下图：","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"Python入门笔记（八）","slug":"Python入门笔记（八）","date":"2022-07-23T08:43:13.000Z","updated":"2022-07-23T12:36:48.237Z","comments":true,"path":"3827.html","link":"","permalink":"http://paneersblog.github.io/3827.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python 程序跳转语句break跳转语句只能在循环结构中使用，通常与if一起搭配使用 whlie循环语法结构： 12345whlie 表达式1: 执行代码 if 表达式2: break# 表达式1为False时退出循环 OR 表达式2为true时循环退出 案例： 12345678910# 1-10内累加和大于20时的数s=0 # 存储累加和i=1while i&lt;11: s+=i if s&gt;20: print(&#x27;累加和大于20的当前数为：&#x27;,i) break i+=1 1234567891011121314# 模拟登录i=0while i&lt;3: user_name=input(&#x27;请输入用户名：&#x27;) pwd=input(&#x27;请输入密码：&#x27;) if user_name==&#x27;Paneer&#x27; and pwd==&#x27;password&#x27;: print(&#x27;正在登录中...&#x27;) break else: if i&lt;2: print(&#x27;账号或密码错误，您还有&#x27;,2-i,&#x27;次机会&#x27;) i+=1else: print(&#x27;连续错误三次，请稍后再试&#x27;) for循环语法结构 1234for 循环变量 in 遍历对象: 执行代码 if 表达式: break 案例： 123456789101112for i in range(3): user_name=input(&#x27;请输入用户名：&#x27;) pwd=input(&#x27;请输入密码：&#x27;) if user_name==&#x27;Paneer&#x27; and pwd==&#x27;password&#x27;: print(&#x27;正在登录中...&#x27;) break else: if i&lt;2: print(&#x27;账号或密码错误，您还有&#x27;,2-i,&#x27;次机会&#x27;) i+=1else: print(&#x27;连续错误三次，请稍后再试&#x27;) continue跳转语句break会跳出循环，而continue只会结束本次循环 语法结构 1234while 表达式1: 执行代码 if 表达式2: continue 案例： 12345678910# 计算1-100内的偶数和s=0i=1while i&lt;=100: if i%2==1: i+=1 continue s+=i i+=1print(&#x27;1-100内的偶数和为：&#x27;,s) 12345678# 计算1-100内的偶数和s=0for i in range(101): if i%2==1: i+=1 continue s+=iprint(&#x27;1-100内的偶数和为：&#x27;,s) 空语句pass 不做任何事情，只起到占位符作用，使用语法结构完整，不报错 一般可用在 if、for、while、函数的定义、类的定义中 语法结构： 12345678if 表达式: pass# --------------------while 表达式: pass# --------------------for 循环变量 in 遍历对象: pass","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"Python入门笔记（七）","slug":"Python入门笔记（七）","date":"2022-07-22T06:20:09.000Z","updated":"2022-07-23T01:30:57.713Z","comments":true,"path":"47766.html","link":"","permalink":"http://paneersblog.github.io/47766.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python 循环结构 嵌套循环 在一个循环结构中嵌套另一个完整的循环结构 123456789# ----------------------------while 表达式1: while 表达式2: 语句块2# ----------------------------for 循环变量1 in 遍历对象1: for 循环变量2 in 遍历对象2: 语句块2# ---------------------------- 生成三行四列*号： 1234for i in range(1,4): for j in range(1,5): print(&#x27;*&#x27;,end=&#x27;&#x27;) print() #换行 生成直角三角形： 1234for i in range(1,6): for j in range(1,i+1): print(&#x27;*&#x27;,end=&#x27;&#x27;) print() #换行 生成倒直角三角形： *************** 1234for i in range(1,6): for j in range(1,7-i): # 1--&gt;5 2--&gt;4 ... print(&#x27;*&#x27;,end=&#x27;&#x27;) print() #换行 生成等腰三角形：&amp;&amp;&amp;&amp;*&amp;&amp;&amp;***&amp;&amp;*****&amp;***************\\ * 123456for i in range(1,6): for j in range(1,6-i): print(&#x27; &#x27;,end=&#x27;&#x27;) for k in range(1,2*i): print(&#x27;*&#x27;,end=&#x27;&#x27;) print() #换行 生成棱形： 1234567891011121314151617181920row=eval(input(&#x27;请输入棱形的行数：&#x27;))while row%2==0: print:(&#x27;请重新输入棱形的行数，限奇数：&#x27;) row=eval(input(&#x27;请输入棱形的行数：&#x27;))# ---先生成上半部分---top_row=(row+1)//2 # 上半部分行数for i in range(1,top_row+1): for j in range(1,top_row+1-i): print(&#x27; &#x27;,end=&#x27;&#x27;) for k in range(1,2*i): print(&#x27;*&#x27;,end=&#x27;&#x27;) print() #换行# ---在生成下半部分---bottom_row=row//2for i in range(1,bottom_row+1): for j in range(1,i+1): print(&#x27; &#x27;,end=&#x27;&#x27;) for k in range(1,2*bottom_row-2*i+2): print(&#x27;*&#x27;,end=&#x27;&#x27;) print() 生成空心棱形： 1234567891011121314151617181920212223242526row=eval(input(&#x27;请输入棱形的行数：&#x27;))while row%2==0: print:(&#x27;请重新输入棱形的行数，限奇数：&#x27;) row=eval(input(&#x27;请输入棱形的行数：&#x27;))# ---先生成上半部分---top_row=(row+1)//2 # 上半部分行数for i in range(1,top_row+1): for j in range(1,top_row+1-i): print(&#x27; &#x27;,end=&#x27;&#x27;) for k in range(1,2*i): if k==1 or k==2*i-1: print(&#x27;*&#x27;,end=&#x27;&#x27;) else: print(&#x27; &#x27;,end=&#x27;&#x27;) print() #换行# ---在生成下半部分---bottom_row=row//2for i in range(1,bottom_row+1): for j in range(1,i+1): print(&#x27; &#x27;,end=&#x27;&#x27;) for k in range(1,2*bottom_row-2*i+2): if k==1 or k==2*bottom_row-2*i+2-1: print(&#x27;*&#x27;,end=&#x27;&#x27;) else: print(&#x27; &#x27;,end=&#x27;&#x27;) print()","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"Python入门笔记（六）","slug":"Python入门笔记（六）","date":"2022-07-20T09:57:32.000Z","updated":"2022-07-21T03:18:24.600Z","comments":true,"path":"34547.html","link":"","permalink":"http://paneersblog.github.io/34547.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python 逻辑运算符 and与 or运算使用 and连接多个选择条件时： 只有同时满足多个条件才能执行if后面的语句块 123456user_name=input(&#x27;请输入用户名&#x27;)pwd=input(&#x27;请输入密码&#x27;)if user_name==&#x27;root&#x27; and pwd==&#x27;password&#x27;: print(&#x27;登录成功&#x27;)else: print(&#x27;用户名或密码不正确&#x27;) 使用 or连接多个选择条件时： 只要满足多个条件的一个，就可以执行if后的语句块 12345score=eval(input(&#x27;请输入您的成绩：&#x27;))if score&lt;0 or score&gt;100: print(&#x27;成绩无效&#x27;)else: print(&#x27;您的成绩为&#x27;,score) 循环结构遍历循环for 语法结构 12for 循环变量 in 遍历对象: 语句块 遍历对象 字符串 文件 组合数据类型 range()函数等 12345678910# 遍历字符串for i in &#x27;hello&#x27;: print(i)# 输出为：# h# e# l# l# o###### 对于range()函数，是一个产生[n,m)的整数序列，包含n不包含m 1234for i in range(1,11): print(i) # 此时会得到1-10的输出结果 if i%2==0: print(i,&#x27;是偶数&#x27;) # 将range函数与if结合，输出偶数。 案例一 12345# 利用range函数与for循环计算1-10的累加求和s=0 # 设置变量用来存储for i in range(1,11): s+=i # 等价于 s=s+iprint(&#x27;1-10之间的累加和为：&#x27;,s) 案例二 1234567891011# 计算100-999之间的水仙花数# ----------------------# 3*3*3+5*5*5+1*1*1=153# 形如153这样的数就是水仙花数# ----------------------for i in range(100,1000): sd=i%10 # 获取个位上的数字 tens=i//10%10 # 获取十位上的数字 hundred=i//100 # 获取百位上的数字 if sd**3+tens**3+hundred**3==i: print(i) 遍历循环的扩展模式 语法结构 1234for 循环变量 in 遍历对: 语句块1else: 语句块2 其中else语句只在循环正常结束后才执行通常与break和continue语句一起使用 简单案例如下： 12345s=0 # 设置变量用来存储for i in range(1,11): s+=i # 等价于 s=s+ielse: print(&#x27;1-10之间的累加和为：&#x27;,s) 结果不变，但程序逻辑不同。 无限循环while 语法结构 12while 表达式: 语句块 执行流程 当表达式的值为true时，执行语句块 当表达式的值为false时，跳过语句块执行后边的代码 案例一 12345answer=input(&#x27;今天有课吗？[y/n]&#x27;) # 初始化变量while answer==&#x27;y&#x27;: # 条件判断 print(&#x27;好好学习&#x27;) # 语句块 answer=input(&#x27;今天有课吗？[y/n]&#x27;) # 改变变量print(&#x27;玩的开心&#x27;) # 语句块 案例二 12345678# 1-100之间的数求和# ---------------s=0 # 存储累加和i=1 # 初始化变量while i&lt;=100: s+=i # s=s+i i+=1print(&#x27;1-100之间的累加和为&#x27;,s) 无限循环的扩展 语法结构 1234while 表达式: 语句块1else: 语句块2 else语句只在循环结构之后才执行通常与break和continue一起使用 123456789# 1-100之间的数求和# ---------------s=0 # 存储累加和i=1 # 初始化变量while i&lt;=100: s+=i # s=s+i i+=1else: print(&#x27;1-100之间的累加和为&#x27;,s) 使用无限循环模拟实现登录12345678910111213i=0 while i&lt;3: user_name=input(&#x27;请输入用户名：&#x27;) pwd=input(&#x27;请输入密码：&#x27;) if user_name==&#x27;Paneer&#x27; and pwd==&#x27;password&#x27;: print(&#x27;登录成功&#x27;) i=8 else: if i&lt;2: print(&#x27;用户名或密码错误，您还有&#x27;,2-i,&#x27;次机会&#x27;) i+=1if i==3: print(&#x27;对不起，账号密码连续错误三次，请稍后再试&#x27;)","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"Anaconda（一）","slug":"Anaconda（一）","date":"2022-07-19T10:11:02.000Z","updated":"2022-07-19T11:29:15.092Z","comments":true,"path":"16606.html","link":"","permalink":"http://paneersblog.github.io/16606.html","excerpt":"最近朋友在学Python，了解到了anaconda，整理如下。","text":"最近朋友在学Python，了解到了anaconda，整理如下。 Anaconda简介Anaconda包括Conda、Python以及一大堆安装好的工具包，比如：numpy、pandas等。 B站一位UP主“肆十二-”的视频中，运用了一个比较恰当的比喻：他将Anaconda比作超市，pip比作菜市场，pycharm比作了厨房。通过这位UP的比喻我们可以形象的理解，Anaconda和pip里有我们所需要的库，Anaconda相对pip会更规范一些，但pip的库会更全面一些。Pycharm则是实现我们idea的工具了～ 那么使用Anaconda的意义在哪呢？我结合查阅到的资料，分为以下三点： 包含conda：conda是一个环境管理器，其功能依靠conda包来实现，该环境管理器与pip类似。 那有童鞋会问了：我能通过pip装conda包达到conda环境管理器一样的功能吗？答案是不能，conda包的实现离不开conda环境管理器。 安装大量工具包：Anaconda会自动安装一个基本的python，该python的版本Anaconda的版本有关。 换句话说就是安装了anaconda就相当于配置好了Python环境，不需要在额外安装一次Python，也不需要再一个个安装工具包。 可以创建使用和管理多个不同的Python版本。 比如想要新建一个新框架或者使用不同于Anoconda装的基本Python版本，Anoconda就可以实现同时多个python版本的管理 Anaconda下载与安装Anaconda分为完整版和精简版，完整版有完整的图形界面（导致很臃肿），这里我推荐miniconda。老规矩这里是miniconda的下载地址安装教程不再赘述，记得选Install for All users 安装完成后可以在cmd或者终端中输入： 1conda -V 来查看版本，或者输入： 1conda env list 查看目前的环境，理论上只会出现一个base环境，正常显示则证明安装完成。 通过Anaconda配置虚拟环境前面有说到，Anaconda可以管理不同版本的Python，就是利用不同的虚拟环境来实现的。关于虚拟环境大家可以将其简单理解成一个虚拟机，我是这么理解的并没有深入研究。 创建虚拟环境在命令行中输入： 1conda create -n py37 python==3.7 这条命令的含义就是创建一个名为py37，python版本为3.7的虚拟环境。安装完成后命令行输入y确认即可。 激活虚拟环境安装全部完成之后，在命令行输入： 1conda activate py37 此时会在命令行最前面显示：(py37)，表示此时是在py37虚拟环境中的。 然后我们可以通过pip指令来安装程序所需要的包从而正常运行我们的python程序了。 与Pycharm联动前文有说Pycharm好比厨房，相对命令行来说更方便我们进行调试程序代码，那么下文将介绍如何在Pycharm中打开程序。 还是老规矩，贴上Pycharm的官网下载地址 安装过程不再多言，找到我们的代码文件夹，直接右键通过Pycharm打开即可。打开之后软件的右下角会显示当前的python环境，点击他选择Add interpreter，然后根据提示添加刚才建立的虚拟环境即可。 在Pycharm中直接打开终端(terminal)，执行 1pip install xx 来安装程序所需的包即可，包会自动安装在当前的虚拟环境下。 总结创建虚拟环境 1conda create -n py37 python==3.7 激活虚拟环境 1conda activate py37 参考资料：1.如何在pycharm中配置anaconda的虚拟环境2.史上最全最详细的Anaconda安装教程3.Python学习中Anaconda和Pycharm的正确打开方式","categories":[{"name":"软件学习","slug":"软件学习","permalink":"http://paneersblog.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"MCNP5入门（一）","slug":"MCNP5入门（一）","date":"2022-04-05T07:47:05.000Z","updated":"2022-04-05T10:33:39.117Z","comments":true,"path":"54952.html","link":"","permalink":"http://paneersblog.github.io/54952.html","excerpt":"MCNP5入门搬运学习，搬砖永无止境","text":"MCNP5入门搬运学习，搬砖永无止境 写在前面因为有童鞋要用MCNP做毕业设计，且求助于我（orz我何德何能！） 我对于MCNP也仅仅是停留在“勉强会用”这一水平，故从核技术论坛中搬运学习MCNP5的相关知识，并结合自己的理解，完成了此篇笔记。 AAAAND，希望大家能给自己的电脑装一个好用的文本编辑器（推荐vs code！yyds！）vs code的好处就是它可以装很多的扩展，用来提高文件的可读性（代码高亮之类）。至于怎么安装扩展，可以百度vs code汉化教程，因为汉化就是给软件安装简体中文扩展。 注：此笔记中提及的软件等请自行寻找，恕不提供。 MCNP概述MCNP文件结构MCNP的输入文件名不可以多于七个字符，所以不建议对输入文件增加扩展名；MCNP的输出文件的扩展名为.o；MCNP内部计算过程的记录文件的扩展名为.r。*.r 文件一般用于断点计算，在基于上一次的计算结果继续模拟计算时，MCNP将不会读取输入文件，而只读取.r文件的信息。除了上面三种常用的文件类型，MCNP还有两种不长用的输出文件。这两种文件只有用户通过输入文件要求MCNP输出这些文件时才会得到。其中一个为.w文件，这个文件是我们想通过MCNP输出surface source 的时候才会产生；另外一个为.p文件，这个文件时我们想通过MCNP追踪粒子的输运过程的时候才会得到。 以上几个文件是常用的用户文件，下面将介绍MCNP程序内部使用的若干文件。 MCNP5.exe 这是MCNP的应用程序，此程序不能双击打开，只能在DOS（cmd）下运行。 vise.exe 此程序为绘图程序，可以让user观察我们在输入文件中所建立的计算模型（相对于抽象的珊元曲面卡，能可视化检查真的很不错！）。 MCNPDate 该目录存放的是MCNP的截面库。 xs52 该文件说明了各个核素的属性，包括质量，截面库内各种反应类型对应的截面存放的位置等。 X11.dll dll文件，链接动态数据库，重要性不言而喻。 为了更好的在dos下运行mcnp，我们可以编写一些bat文件。关于bat语法可以关注我之前的博客，或者csdn等寻找学习。 注，使用bat文件时应确保环境变量已经被添加，环境变量中path中的路径决定能不能运行.cmd MCNP使用方法上文我们说到 xs52 文件很重要，但如果你的MCNP为绿色免安装版本的话，还需要对该文件进行简单的修改才能让MCNP找到截面库。我们用记事本打开xs52，可以看到第一行为datapath&#x3D;X:\\LANL\\MCNPDATA\\。我们需要正确的修改该路径，例如我将我的 LANL文件夹放在了D盘根目录，此时这里的路径就是：D:\\LANL\\MCNPDATA\\经过上述修改之后，我们就能使用MCNP程序来进行计算了。MCNP进行计算时会占据单个cpu的资源，大家的电脑都是多核的，不用担心MCNP会占用太多资源。若想提高计算效率可以使用mpi并行计算，我尝试过一次但并没有成功orz，大家感兴趣可以自行了解尝试。 MCNP 输入文件书写方法输入文件规范MCNP的输入文件在结构上基本上可以分为三块，分别为cell块、surface块和其他内容。块内除了注释外，不得有空行，而两个块之间只能有一个空行。通常情况下，每一行中只能有一个主导性的助记符，这个助记符可以有很多参数和附属的次要助记符。MCNP官方手册中称这样的助记符为卡(card)。每一列不得超过80个字符，若书写不下时，可以在行尾写入 &amp;符号，并从下行继续书写。 输入文件的第一行不论写了什么都会被MCNP忽略掉，这一行的作用是方便用户给这个输入文件做一些备注。 输入文件中有两种注释方法，助记符分别为c (c后有一个空格)和$符号。在第一行写c就是把这一行都注释掉；在某一行的某列上写$就是注释该行该列后的内容。但是即使是注释， 也不能超过每一列80个字符（包括空格）的要求。 还有三个常用的助记符，分别为r，i，j。r代表的是repeat，例如1 3r 就等于写了 1 1 1 1；i代表线性插入点，例如 1 2i 4 就等于写了 1 2 3 4；j代表的是jump，表示该位置使用默认值，例如1 j 2就等于写了 1 默认值 2，多用于描述重要性部分。 算例：7MeV轫致辐射X射线角分布、能谱在书写MCNP输入文件前，我们首先想好要计算的模型，包括坐标系以及各个物体在这个坐标系内的相对位置。我的计算模型如下图所示。 计算模型中感兴区是半径为100cm的球内，源是能量为7MeV，位置在(-2,0,0)的单向电子束；X射线靶是半径（Y或者Z方向）1cm，高度(X方向)1cm的金；其他位置均为真空。记录面设置在圈定感兴区的球面上。 surface card为了描述出上述模型，我们首先写surface模块，这里需要定义的surface有： 源所在面 Au的三个表面（两个底面和一个侧面） 圈定感兴趣的球面 划分感兴趣区域表面的记录面 源所在面书写方法： 121 PX -2 C 第一个1是指这个面的序号，在cell模块会用到。PX为助记符，表示垂直于X轴的面。-2是该面在X轴上的轴距。 同理可得Au的三个面分别为： 12342 PX 03 PX 14 CX 1 C CX指的是轴心是X轴的圆柱面，1代表半径 圈定感兴趣的区域的面： 12100 SO 100 C 第一个100还是面的序号，定义面序号时不需要连续的定义，但要保证定义顺序递增。so代表的是圆心在原点的球面，后面的100就是指半径 除了上述的面，为了将记录面分割成若干个小面，我们需要额外定义一些分割用辅助面，此处我定义若干圆锥体来分割，以第一个为例： 1230 KX 0 0.234567901 1 C KX指的是轴心是X轴的圆锥面，0代表顶点在原点，0.234567901代表圆锥顶角的tan值平方。这样的圆锥有两叶，分别在Z&gt;0和Z&lt;0，所以最后的1代表的是我们所需要的Z&gt;0的部分 cell card有了这些surface之后我们就能来书写cell部分了。栅元卡有四列数据构成： 栅元号，栅元号是定义栅元的标识符，相当于给栅元编个号，取个名字。栅元号取值区间[1,99999]。 材料号，材料号指明了该栅元是由几号材料组成的，同时需要在数据卡的材料卡里对各种材料进行详细说明。0代表真空，不用在数据卡中说明。 材料密度，指出了材料的密度，加负号是质量密度(g&#x2F;cm3)，不加负号为质量密度(1024Atoms&#x2F;cm3) 构成曲面，指出了栅元是由那些曲面包裹而成。除了最外部的空间，各个栅元都应该是由相应曲面包裹而成的封闭几何体。 假如1号曲面方程为f(x,y,z)&#x3D;0，则f(x,y,z)&lt;0的部分由“-1”表示，f(x,y,z)&gt;0的部分直接由1表示。 描述栅元时还要用到布尔算符，布尔算符有三个：空格、冒号、井号。空格表示“交”，冒号表示“并”，井号表示“补”。比如100号栅元为“-1”和“-2”相交的空间。 回到我们的算例： 首先定义Au块(cell)，它由三个面围成，它们是序号分别为2，3，4。 Au块由2号面的向右方向(或X轴的正方向)，3号面的向左方向（或X轴的负方向）以及4号面的内部围成。所以这个Au块（cell）的书写方法是：1 1 -19.3 2 -3 -4。 第一个1代表的是这个cell的序号； 第二个1代表的是这个cell所对应的材料种类为1，关于1号材料的定义将在后面介绍； 第三个-19.3中，负号代表的是实际密度，若没有负号则代表的是原子密度。所以-19.3代表的是Au块（cell）的密度是19.3g&#x2F;cm3； 之后的2 -3 -4 描述的是Au块是由2号面的正方向，3号面的负方向，4号面的内部围成的。 源不是一个物体，所以不需要在cell块中定义。而在感兴趣内，除了Au块（cell），其他位置均为真空。 尽管是真空，我们仍需要在输入文件内把真空定义为一个物体。 定义的方法如下：2 0 -100 #1。 其中第一个2代表cell的序号； 第二个0代表定义的块内什么东西都没有； 后面的-100 #1限定了这个cell的几何空间，它表示这个块是在100号面的内部，（#助记符代表扣除的意思）除了1号cell的所有空间。 我们同样需要定义感兴区外的空间，定义的方法如下：100 0 100。 第一个100是这个cell的序号； 第二个0代表真空； 第三个100代表第100号面的外部。 2号cell和100号cell均为真空，区分哪一个是感兴区的方法是利用另外一个助记符imp，它代表的是importance，也就是粒子在该cell内的重要性。这个助记符可以在每个cell的定义的末端写上，也可以在第三块中写入。在cell末端写入的方法如： 12342 0 -100 #1 imp:e,p=1C 它代表了2号cell中电子(e)及光子(p)的重要性为1，即它是感兴区内的物体100 0 100 imp:e,p=0C 它代表了100号cell的电子及光子的重要性为0，即它在感兴区外。 感兴区与非感兴区并不需要一定是位置划分分明的两块区域，我们可以在感兴区内设定一个非感兴区，只要粒子被输运到该区域就会被杀死（类似于黑洞）。 数据卡最后我们需要书写第三个模块，在这个模块内将指明模拟计算中所涉及的反应类型，记录方法，运算时间限定等。 模式卡：mode e p 这个卡说明了计算中将涉及两种粒子，分别为电子及光子。（源粒子是电子，它轰击Au块会产生轫致辐射X射线）。 材料卡：m1 79197 -1.0 其中m1代表第一号材料，同理会有m2、m3等材料; 79197的格式是ZZAAA，即79是原子序数(Au)，197是质量数; -1.0中负号代表的是原子个数的比重，正号则代表的是质量比重。 材料卡的各种核素的比重的标识中并不要求归一化，MCNP会自动给用户归一化。也就是说 m1 79197 -2.0 79198 -2.0与m1 79197 -0.5 79198 -0.5 的写法对于MCNP而言是等效的，都说明1号材料中197Au与198Au各占一半，就像SRIM。 源定义：sdef par=3 sur=1 pos=-2 0 0 vec=1 0 0 dir=1 erg=7 其中sdef是源定义的助记符代表source definition； par代表源粒子的种类，1代表中子，2代表光子，3代表电子； sur代表源所在的面，上面定义中sur&#x3D;1说明源在序号为1的面上； pos代表源所在的位置，按照上面的定义，源的位置为（-2,0,0）。请谨记若sur 和pos 同时被用上，请保证pos的点是在sur的面上，不然可能导致计算结果有误； vec代表参考向量，向量的起始点是原点，而终止点是(1,0,0)。这说明了我们设定的参考向量就是X轴的正方向； dir代表粒子出射方向与参考向量的夹角的余弦，上面定义中为1，说明了源粒子沿着X轴正方向出射； erg代表源粒子的能量，按照上面的定义，源粒子的能量为7MeV。 关于源的定义还有许多其他的助记符以及各种分布情况，请参考MCNP的官方使用手册（或者等我填坑(o^^o)）。 粒子重要性表示：imp:e 1 1 0 imp:e代表了这张卡描述的是各个cell中电子的重要性 1 1 0代表了在cell块中写的各个cell（以书写顺序）的重要性分别为1、1、0。这说明了cell块中第三个描述的cell（cell的序号可能不是三，只是代表它是第三个被定义的cell。）是电子的黑洞，只要电子被输运到这个cell就会被杀死，停止输运。同理我们还可以定义imp:p 1 1 0。 在前面已经描述过，这里的imp卡也可以在cell块中写入，不再赘述。 能量截断卡：cut:e j 1 其中cut代表能量截断卡的助记符； e代表电子； j代表第一个参数选用默认值； 1代表截断能量为1MeV。 这个卡的作用是当输运过程中，电子的能量小于1MeV，就杀死这个电子。 这样做的目的是，若我们只关心高能（&gt;1MeV）的X射线，而能量小于1MeV的电子已经不会再产生能量大于1MeV的X射线了，所以我们可以停止这些低能电子输运来节省计算机机时而且不会影响计算结果。 同理我们还可以写cut:p j 1 记录方法描述卡1：F1:p 100 其中F1代表的是第一种记录模式，也就是通过某个面的粒子的个数（相对于一个源粒子）； p代表记录的是光子； 100代表记录面是序号为100的面。 故这个记录卡的作用是记录所有通过100号面的光子。 记录方法描述2：F2:p 100 其中F2代表的是第二种记录模式，也就是通过某个面的粒子的注量，它等于通过面的粒子个数（相对于一个源粒子）除以该面的面积。 记录面分割：Fs2 -30 -31 -32 -33 -34 -35 -36 -37 -38 -39 40 41 42 43 44 其中Fs2代表的是分割第二号记录卡的记录面（也就是分割记录第100号面）； 后面的-30 等代表分割方法，输出时MCNP会给出: 100号面上，从30号面的内部（圆锥体右叶的内部）出射的粒子 100号面上，从30号面的外部且40号面的内部出射的粒子 100号面上，从30号面的外部且31号面的外部且32号面的内部出射的粒子 100号面上，从30号面的外部且31号面的外部且32号面的外部且33号面的内部出射的粒子。 以此类推 能量分割：我们可以对任意一个记录卡分别设置能量分割卡或所有记录卡同意设置相同的能量分割卡。 这里我们将对2号记录卡设置一个能量分割卡：E2 1 19i 7 其中E2代表这是对2号记录卡的能量分割卡，后面的1 19i 7代表的是分割方法，也就是在1MeV至7MeV之间插入19个点（若把E2写成E0则代表对所有记录卡使用相同的能量分割方法。）。 计算时间设定卡：ctme 10 这个卡说明了要求MCNP计算10分钟。 可以想象，计算的时间越长，模拟的源粒子的个数就会越多，模拟结果就会越接近它的期望值，统计涨落就会越小。所以计算时间需要用户根据自己希望得到的统计可信度，设定计算时间。 除了ctme还有利用模拟源粒子的个数进行时间限制的方法如NPS 10000，它说明了需要MCNP模拟10000个源粒子的输运过程（也可以写成NPS 1E4）。 在这个文件中只使用了两个记录方法，分别为F1和F2。MCNP中一共有8中记录方法，我们可以参考使用手册，选用适合计算模型的记录卡。 此外一种记录卡可以有多个记录面，只要保证记录卡的个位数是8种记录卡的一种，例如F11和F21都是第一种记录类型，即通过某个记录面的粒子个数。 另外请谨记，在使用F1和F2的记录卡时，记录面一定要是构成某个cell的一个面，不然MCNP不会给出记录结果，也就是说如果用户随意定义了一个面(如上面定义的某个分割面)，而且这个面没有被使用在定义某个cell上，那么我们不能期望MCNP可以记录通过这个面的粒子信息。使用分割面时，其实还是记录通过那个记录面的粒子个数，分割面只是把那个记录面分割为若个块而已。 总结-输入文件总结上文，得输入文件为： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647X-ray Ener=7MeVc cell card1 1 -19.3 2 -3 -4 $ Au 2 0 -100 #1 100 0 100c surface cardc radiation source1 px -2 $ 放射源所在面2 px 0 3 px 1 4 cx 1 30 kx 0 0.234567901 131 kx 0 0.5625 132 kx 0 1.040816327 133 kx 0 1.777777778 134 kx 0 3 135 kx 0 5.25 136 kx 0 10.11111111 137 kx 0 24 138 kx 0 99 139 kx 0 1e33 140 kx 0 99 -141 kx 0 24 -142 kx 0 10.11111111 -143 kx 0 5.25 -144 kx 0 3 -145 kx 0 1.777777778 -146 kx 0 1.040816327 -147 kx 0 0.5625 -148 kx 0 0.234567901 -149 kx 0 0 -1100 so 100mode e pm1 79197 -1.0 $ Au sdef par=3 sur=1 pos=-2 0 0 vec=1 0 0 dir=1 erg=7 imp:e 1 1 0imp:p 1 1 0cut:e j 1cut:p j 1F1:p 100F2:p 100Fs2 -30 -31 -32 -33 -34 -35 -36 -37 -38 -39 40 41 42 43 44 &amp; 45 46 47 48 E2 1 19i 7ctme 10 注意，该输入文件共有两个空行，用来分割 cell card &amp; surface card &amp; data card。MCNP对于输入文件格式要求很严格，应注意。 关于vise.exe我们可以利用vised.exe观察这个已经写好的输入文件的模型，如果书写有误，我们需要修改输入文件。有错误时会导致vised.exe无法打开文件并被强制关闭。出现这种情况时，请看输入文件的书写规范，如空行是否多了或少了等。 若打开后，观察到明确的红线，代表两个物体分享了一部分空间，这在MCNP中是不允许的。 在书写复杂的模型时，vised.exe可以帮助我们确定写出来的模型与我们想像的模型是一致的。我们应反复地观察各个方向的视图，从而确保输入文件的正确性，不然计算出来的结果就很有可能是错误的。 Vised.exe是windows下的应用程序，我们双击它并用它打开我们已经书写好的输入文件，就可以观察写好的模型了，操作简单不做赘述。 输出文件解读利用MCNP 计算上面的输入文件可以得到同名的、拓展名为o的文件。使用文本编辑器打开它，搜索关键字：tally 找到如下部分： 1234561tally 1 nps = 2958959 tally type 1 number of particles crossing a surface. tally for photons surface 100 2.90042E-01 0.0010 这是输出文件中关于记录信息的结果部分。 nps 代表了一共运行了2958959个粒子的输运过程 tally type 1 代表记录类型是1，也就是number of particles crossing a surface tally for photons 代表记录的是光子 surface 100 代表记录的是第100号面 记录结果是：2.90042E-01 0.0010 它代表有1个7MeV的电子轰击1cm的Au时，会有0.29个能量大于1MeV（我们在cut中限定了能量）光子透过第100号记录面，而这个数据的相对误差为0.001。 第二号记录结果如下： 1234567891011121314151617181920212223242526271tally 2 nps = 2958959 tally type 2 particle flux averaged over a surface. units 1/cm**2 tally for photons areas surface: 100 segment 1 6.28319E+03 2 6.28319E+03 3 6.28319E+03 4 6.28319E+03 5 6.28319E+03 6 6.28319E+03 7 6.28319E+03 8 6.28319E+03 9 6.28319E+03 10 6.28319E+03 11 6.28319E+03 12 6.28319E+03 13 6.28319E+03 14 6.28319E+03 15 6.28319E+03 16 6.28319E+03 17 6.28319E+03 18 6.28319E+03 19 6.28319E+03 20 6.28319E+03 ...... nps代表一共运行了2958959个源粒子的输运过程。 Tally type 1 代表记录类型为2，也就是particle flux averaged over a surface，请注意它的单位是1&#x2F;cm2。 Tally for photons代表的是记录的是光子。 Surface 100 代表记录面是第100号面。 Segment 代表的是利用分割面分割后，100号面的各个子面的面积。 由于我们使用的等立体角分割，所以各个子面的面积均相同 其他记录结果： 1234567891011121314151617181920212223242526272829303132333435363738surface 100 segment: -30 energy 1.0000E+00 0.00000E+00 0.0000 1.3000E+00 1.58985E-06 0.0058 1.6000E+00 1.25669E-06 0.0065 1.9000E+00 1.01556E-06 0.0073 2.2000E+00 8.05683E-07 0.0082 2.5000E+00 6.50129E-07 0.0091 2.8000E+00 5.29430E-07 0.0101 3.1000E+00 4.41488E-07 0.0110 3.4000E+00 3.71080E-07 0.0120 3.7000E+00 3.09977E-07 0.0132 4.0000E+00 2.59094E-07 0.0144 4.3000E+00 2.11708E-07 0.0159 4.6000E+00 1.80941E-07 0.0172 4.9000E+00 1.59103E-07 0.0184 5.2000E+00 1.31403E-07 0.0202 5.5000E+00 1.04079E-07 0.0227 5.8000E+00 8.97713E-08 0.0245 6.1000E+00 6.86866E-08 0.0280 6.4000E+00 4.88390E-08 0.0332 6.7000E+00 2.82384E-08 0.0436 7.0000E+00 1.05423E-08 0.0714 total 8.26230E-06 0.0025 surface 100 segment: 30 -31 energy 1.0000E+00 0.00000E+00 0.0000 1.3000E+00 9.48975E-07 0.0075 1.6000E+00 7.33985E-07 0.0086 1.9000E+00 5.56701E-07 0.0098 2.2000E+00 4.35679E-07 0.0111 2.5000E+00 3.35311E-07 0.0127 2.8000E+00 2.73079E-07 0.0140 3.1000E+00 2.10847E-07 0.0160 ..... 其中： 12surface 100 segment: -30 代表统计的是从记录面100且从分割面30的内部（圆锥右叶的内部）通过的光子。同理， 12surface 100 segment: 30 -31 代表的是统计的是从记录面100且从分割面30的外部且从分割面31的内部通过的光子。 对于： 1231.0000E+00 0.00000E+00 0.00001.3000E+00 1.58985E-06 0.00581.6000E+00 1.25669E-06 0.0065 最左边一列代表的是能量，第二列代表的是概率，第三列代表的是第二列的相对误差。 对于这三行统计结果的解读如下，在相应的记录面内， 能量为0~1MeV的光子的注量为0，这是因为我们把能量小于1MeV的光子都杀死了（利用cut卡）。 能量为1~1.3MeV的光子的注量为1.58985E-6，单位是1&#x2F;cm2，且是相对于一个电子。 能量为1.3~1.6MeV的光子的注量为1.25669E-06，单位是1&#x2F;cm2，且是相对于一个电子。 以此类推。 结束语感觉没啥可写的了，剩下的都在手册里或者不难找到。有啥疑问我们评论区聊（评论托管服务器在国外，可能会偶尔渲染不出来大家可以试着多进几次）。 关于使用bat文件配置环境变量的问题我们可以使用快捷键 WIN+S 搜索环境变量，打开编辑环境变量进入如下截面： 首先双击 Path，然后点击新建，将bat文件注意是bat文件所在的路径添加进去。该操作的意义是只有在Path内的路径才能使用cmd。bat文件可以不放在MCNP根目录，只要确保bat文件与输入文件在同一目录下即可。 最后的最后，附上我写的bat文件(可以删除中间文件)，大家看看能不能用～ calculate： 123456789101112131415161718::设置输入文件和输出结果文件名set inp=test.iset outp=test.o::删除旧文件if exist %outp% del %outp%::调用MCNP开始计算call mcnp5.exe i=%inp% o=%outp%::删除各类中间备份转储文件(应该是这么几个)del runtp*del dcinpdel ddinpdel dfilldel inp del out*del *.sav draw： 1234567891011call vised.exedel *.odel runtp*del dcinpdel ddinpdel dfilldel inp del out*del *.sav","categories":[],"tags":[{"name":"MCNP5","slug":"MCNP5","permalink":"http://paneersblog.github.io/tags/MCNP5/"}]},{"title":"Chapter_1","slug":"Chapter-1","date":"2022-02-27T04:35:02.000Z","updated":"2022-07-16T09:29:30.028Z","comments":true,"path":"28793.html","link":"","permalink":"http://paneersblog.github.io/28793.html","excerpt":"专业英语词汇表","text":"专业英语词汇表 Chapter-1-words material world 物质世界 distinguish 区别,辨别 chemical,mechanical,electrical properties 化学、力学、电学性质 physical state 物理状态 plasma 等离子体 apparent 显然的，外观的 distinct 截然不同的，独特的 diversity 差异,多样性 element 元素 bond 结合 联结 in turn 依次,轮流 arise from 起于 basic particle 基本粒子 electrons,protons,neutrons 电子、质子、中子 internal forces and energy 内力和内能 gravitational,electrostatic,electromagnetic,nuclear force 引(重)力、静电力、电磁力、核力 ability to do work 做功的本领(能力) stored,released,transformed,transferred,“used” energy 能量的存储、释放、转换、转移、使用 entity 实体 vice versa 反之亦然 review 回顾,复习 recall 回忆,回想,记起 product (quotient,sum,difference) 乘积(商、和、差) muscles 肌肉 object 物体 potential (kinetic) energy 势(动)能 rest 静止 其余 Newton’s law 牛顿定律 law(theorem,definition) 定律(定义、定理) mass(m),acceleration(a),speed(v) 质量、加速度、速度 conservation of energy 能量守恒 (conversation 会话；谈话) hydroelectric plant 水电厂 turbine 汽轮机，涡轮机 electric generator 发电机 blade 叶片 joule(J) 焦耳 friction 摩檫 electrical potential difference 电位势 charged particles 带电粒子 automobile (motor car) 汽车 a storage battery 蓄电池 mechanical parts 机械部件 thermodynamics 热力学 specify 详述,载明 inherent 固有的,天生的 convert 转变,变换 petroleum 石油 fossil 化石,远古生物形成的 nuclear reaction 核反应 intimate 亲密的,熟悉的,私人的 fission 裂变 thermometer 温度计 specific heat capacity 比热 macroscopic 宏观的 microscopic 微观的 Celsius scale 摄氏温标 Kelvin scale 开氏温标 translational motion 平动 Boltzmann’s constant 玻尔兹曼常数(K) proportional to 正比于 appreciate 估价,理解 inversely proportional to 反比于 prefix 前缀,词首（postfix 后缀，词尾） astronomical 天文的,极大的 submicroscopic 亚微观的 oscillation 振荡,振动 transmitter 无线电，电视讯号发送装置 X-ray X 射线 gamma ray γ 射线 sophisticate 改进,采用先进技术,完善 gasoline 汽油 dissociate 分离 latent energy 潜能 fusion 熔解,聚变 agitation 激发,搅拌 theory 理论 （experiment 实验） rigor 精确 special relativity 狭义相对论 rest mass 静止质量 impart 给予,传授 startling 令人吃惊的 viz. 即 consume 消耗,消费 magnitude 大小,数量,量级 dimensions 尺寸,尺度,维(数),度(数),元 efficient 有效的,效率高的 discrepancy 差异,矛盾 vital 至关重要的,所必需的 long-term 长期 survival 幸存,生存 crisis 危机 scarce 缺乏的,稀有的 inequitable 不公平的","categories":[{"name":"英语学习","slug":"英语学习","permalink":"http://paneersblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"WordList_P","slug":"WordList-P","permalink":"http://paneersblog.github.io/tags/WordList-P/"}]},{"title":"SRIM入门（四）","slug":"SRIM入门（四）","date":"2022-02-22T16:34:54.000Z","updated":"2022-07-16T09:31:23.182Z","comments":true,"path":"6067.html","link":"","permalink":"http://paneersblog.github.io/6067.html","excerpt":"demo4 靶损伤计算","text":"demo4 靶损伤计算 前文已经说明了如何在单质硅上创建一个掺杂剂量峰深度为250纳米，分布约为每平方厘米 5E18个原子的互补金属氧化物n型井。问题是选择正确的掺杂物，并确定合适的注入能量和剂量（离子&#x2F;平方厘米）来获得这个n型井。demo1得出的结论是采用能量为 190keV的磷离子，注入剂量为每平方厘米1014个离子 在这部分我们继续使用demo1中的靶来进行详细阐述离子对靶的损伤计算。 通常，在室温300K下的注入产生的绝大部分损伤将由于“自退火”而复合。在室温下,晶格原子具有足够的能量使得简单的靶损伤重新形成晶体而使靶损伤消失。一般情况下,相比半导体硅的自退火，金属的要快，而绝缘体的要慢，因而一个硅靶是一个不错的例子。然而 SRIM没有考虑热效应，因而我们计算的注入损伤发生在温度为OK的情况下。忽略热效应会改变最终损伤的大小，但我们要讨论的基本损伤种类仍会产生。 首先我们按照 demo1中描述的方法在 SRIM中进行相同设置并计算。 打开 SRIM并点击 TRIM Calculation 选择 INO DATA，点击 PT选择磷元素，设置其能量为 190keV 在靶数据中选择硅，设置其厚度为 3500Ang 在界面右上角将 DAMAGE选项选择 Detailed Calculation with Full Damage Cascades 按下 Save Input and Run TRIM开始计算 我们可以看到，计算得出的图像展示了每个离子的计算结果。红色的小点是离子和靶原子之间的碰撞，在这些碰撞中靶原子从它们原来的晶格位置中被撞击出来。绿色的点是在反冲靶原子硅和其它靶原子之间的碰撞。反冲靶原子造成级联碰撞在损伤过程中占据多数。只有当能量转移大到可以将原子撞击出其晶格位置时这些点才会被绘入图中。这样一来这个图像展示了已经发生错位的原子数量。每个离子停止的地方用黑色的点，但是单独的一个黑色像素点太小了，以至于在现代高分辨率的屏幕上很难看到。 注意到左上角的“ION”重复离子信息的选项框。注意，“TARGET DATA”窗口包含了所有的靶信息（你可能需要使用光标展开这个窗口）。其中的一些信息可能不是你输入的，例如位错能(DisplacementEnergy: 15eK）、表面束缚能（SurfaceBinding Energy: 4.7eV）和晶格束缚能(LatticeBindingEnergy: 2eV）。这些给出的数值是硅的默认值。 TRIM是一个很灵活的软件，点击 Pause暂停计算，然后点击 Change TRIM。此时我们可以改变输入的值来修改计算。 例如我们可以将反冲原子由绿色改为蓝色。点击标记为 “Moving Atom Colors”的颜色方框，会弹出一个调色板，选择蓝色(或者别的)，然后依次点 “OK” “End Edit” “Continue”。当新的反冲硅原子产生一个空位时他们将会被标记为蓝色(这些蓝色的小点会被大量绿色的“阻止原子”硅所淹没，但应该可能在级联碰撞中看到一些)。 注意在一张离子径这一些离子看起来正在从右端离开靶。这个靶要阻止所有的离子还不够深。要修正这一点，点击来暂停 Pause计算。然后在 Target Data 窗口中点击 Width（A）中的 3500。将弹出一个窗口，从中我们可以把深度改变为4000。你同样需要改变左边图像窗口中的 Plot Window，这里也要改成4000，这样你才能看到这个靶深度。完成这个修正后,依次点击 “End Edit” “Continue” 我们在 TRIM中进行了一项非常基础性的改变，计算将会重新开始。图像必然会随之改变，它现在展示了 O-4000A深度的情形。并且我们会看到现在所有的离子都在它们离开图像右端之前停止下来了。 进行这项练习的目的是告诉你没有必要知道所有的变量才开始 TRIM。因为可能你不确定射程最远的离子所能到达的位置。你可以用一个粗略的值开始TRIM计算，然后在你看到了实际的情形后可以将它们改变到更加合理的值。 接下来我们插入一点学科背景，trim此时可以继续计算。 背景—“级联反冲中的物理原理” 这个部分探讨对载能离子给固体靶造成损伤的估计中需要使用的术概念。我们首先需要阐明一些基础的概念。 靶损伤中不同的部分定义如下： 位错：一个载能入射粒子将一个晶格原子撞击出它初始位置的过程。 空位：一个空的晶格位置（没有原子）。一开始所有的晶格位置都被占据，然后位错过程产生了空位。 填隙原子：晶体中的原子被撞击出原有的位置并停留在固体中。当入射到固体中的离子停留在固体中时，也被视为填隙原子。 碰撞复位：填充了空位的和初始原子相同（这一点将会在下面讨论）的新原子。这是唯一可以让空位可以被复合的机制。 位错能（Edisp）：即将一个靶原子从其晶格中的位置撞击出足够远的距离使得它无法迅速回位所需要的最小能量。这个最小能量产生一个弗仑克尔对，即一个空位和一个临近的填隙原子，而这是离子产生的损伤中最基本的一种类型。 晶格束缚（Elatt）：将一个原子从晶格中移除出来所需要的最小能量。克服电子束缚并将原子从晶格中移位出来是需要能量的,因而这部分被转移到反冲原子中的能量被丢失了。晶格结合能必然小于错位能。 表面束缚能（Esurf）：靶表面的原子在靠近表面一端未被束缚，因而将其从晶格位置中移除出来所需的能量相比在固体内部被其他原子包围时要小。一个表面原子具有更少的电子束缚需要被打破。这个能量在计算溅射（表面原子的移除）时特别重要。 运动原子的最终能量（Efinal）：具有低于该能量的原子被认为是静止在固体中的。离子动能的计算必须在某个最小能量下停止。不同过程的能量损失在离子减速时变得更小，而一个最小能量能产生一个更有效的计算结果。最终能量小于上面任意个能量。 对于硅靶，默认值为：Edisp&#x3D;15eV，Elatt&#x3D;2eV，Esurf&#x3D;4.7eV以及Efinal&#x3D;2eV。 如果一个运动的原子撞击了一个靶原子，并且传递给了后者超过 Edisp 的能量，那么靶原子将会被撞击出其晶格位置。由于它将损失 Elatt 的能量到晶格中去，因而它的反冲能量Erecoil&#x3D;Edisp-Elatt。如果反冲靶原子的能量大于 Edisp，那么它将继续通过撞击其它靶原子来产生更多的空位。 另外，有一种特殊的损伤必须要考虑到。如果入射原子与它撞击的原子是相同的元素，那么入射粒子可能会将其能量转移给靶原子，将它撞击出晶格位置，而入射原子将会占据靶原子在晶格中的位置,这被称为复位碰撞。尽管听起来很复杂，但是这种机制可能会降低总空位的30%。要发生复位碰撞有需要满足三个基本条件： 入射原子必须和靶原子相同。 入射粒子残留的能量必须小于 Efinal（它必须停下来）。 被撞击的原子必须拥有足够的能量来继续移动，也就是说它的能量要大于 Edisp 计算级联反冲、靶损伤、复位碰撞等过程需要特定的假设，下面来明确其定义： 假设入射粒子原子序数为 Z1,能量为 E，它和原子序数为 Z2的靶原子发生碰撞。在碰撞之后入射粒子能量为 E1 并且被撞击原子能量为E2。 当 E2 &gt; Edisp（被撞击原子得到了足够的能量离开原来的位置）时会产生位错。当E1 &gt; Edisp 和 E2 &gt; Edisp（两个原子都有足够的能量离开碰撞位置）同时满足时空位就会产生。之后两个原子都会变产级联碰撞中的运动原子。原子 Z2的能量 E2在它进行下一个碰撞之前会因为 Elatt减小。如果 E2 &lt; Edisp,那么被撞击原子没有足够的能量，因而它将通过振动返回到它原来的位置并以声子（晶体中晶格振动沉积的能量）的形式释放出能量 E2。 在一个碰撞以后如果E1 &lt; Edisp，E2 &gt; Edisp并且 Z1 ≠ Z2，那么入射原子将会在碰撞处停下而形成复位碰撞，其中 E1的能量以声子的形式被释放。晶格位置中的原子通过交换保持为相同种类的原子。这种形式的碰撞在单元素靶中发生大的级联反冲时是很常见的。如果 E1 &lt; Edisp，E2&gt;Edisp并且 Z1 ≠ Z2，那么 Z1变成了停止下来的填隙原子。 最后，如果E1 &lt; Edisp并且E2 &lt; Edisp，那么Z1将变成填隙原子，而E1+E2以声子的形式被释放。如果你的靶内有几种不同的元素，并且每一种都有一个不同的错位能，那么当每个级联反冲原子在撞击不同靶原子时Edisp将会变化。 这些不同损伤类型的总和是相关的。用两个方程可以描述： $$错位&#x3D;空位+复位碰撞$$$$空位+复位原子&#x3D;填隙原子+离开靶的原子$$ 如果一个级联反冲原子离开了靶，它就不再被跟踪了。也就是说如果它离开了靶的前表面或者后表面，他就被程序丢弃了。TRIM会不停地追踪在靶内部侧向运动的原子，即使它们已经离开了屏幕显示的范围。但是一旦它们穿过了靶的任何一个表面,它们就被丢弃了，不再被计数。这也是靶内部产生了空位，且一个运动的反冲原子最后停留的地方可能离它产生的空位有一段距离的原因。如果一个反冲原子离开了靶，很显然填隙原子的总数与空位的总数相比将会有一个差额，这个差额就是以某种形式脱离靶的原子数。每个复位碰撞会减少空位数并减少一个填隙原子，这使得上面的第第一个方程得以平衡。 对于 TRIM快速计算靶损伤，TRIM使用了Kinchin-Pease解析法，关于其背景可参考如下文献(博主表示我就不看了QaQ)： Kinchin and R.S. Pease, Rep.Prog.Phys.,Vol.18,1(1955). P.Sigmund, Rad.Eff,.Vol.1,15(1969). M.J.Noregett, M.T.Robinson and I.M.Torrens,Nuci.Eng.Design,Vol.33,50(1974). 现在我们来看两种简单的图像：电离和声子 电离能损是指损失给靶电子的能量。靶中的电子会从快速运动的离子和反冲原子中获得能量，然后以热量（金属靶）或者声子（绝缘体靶）的形式来释放掉这部分能量。 声子是在晶体中的原子震荡能。由于晶体中所有的原子都是相关的，当你使它们中的一个开始震荡时,其他原子也会开始震荡。由于从某种意义上来说它是量子化的(特定的震荡模式具有优越性），这种质量震荡被描述为声子。 如果你的 TRIM还在运行，我们继续往下说。 通过点击在作图窗口中的选项框打开电离图（在前面查看作图工具的介绍）。这里有两种不同的图像，一种是从入射离子中损失给电子的能量，而另一个是从反冲靶原子中损失给电子的能量。通常来说，离子具有更大的电离能损，但是并不是对所有的离子&#x2F;靶的组合是这样的。电子对与其运动速度近似的粒子能量的吸收具有最高的效率。相比反冲硅靶原子，入射离子运动的快得多。所以离子损失更多的能量给靶电子。 关闭电离图，打开声子图。 这个图像展示了声子能损相比电离能损非常不同。你很难可以看到从离子（图像底部的红色线）中损失能量给声子，而声子几乎全是通过反冲靶原子产生的。这些反冲声子由何而来，我们还不是十分清楚（将有另一张图像对此进行解释），但是你可以查看名为Calculation Parameters的窗口。这个名为“%Energy Loss”的部分展示了每个离子的入射能量（190keV）是如何耗散的。名为Phonons的一行显示离子只将其约0.44%的一小部分能量损失给了声子（190keV×0.44%&#x3D;836eV），而反冲原子转移了约为 30%的能量给声子（190keV×29%&#x3D;55keV）。 那么，声子是如何产生的呢？ 声子来自于几种途径。 当一个原子从它们晶格中的位置被撞击出来时，它的结合能 Elatt&#x3D;2eV被转移到反冲原子产生的声子中。如果你查看 TRIM中右上角的选项框，你将会看到每个离子产生的空位数，Vacancies&#x2F;Ion（空位&#x2F;离子比）约为2300。因而对于每个离子，通过离子或者级联反冲产生的错位能产生2300×2eV&#x3D;4600eV的声子。 剩下的声子是由撞击到晶格原子并转移了小于Edisp的能量的离子或者反冲原子产生的。至少Edisp 的能量需要被转移到靶原子中才能将它从本身的位置中驱逐出去。那如果转移的能量小于这个值会发生什么呢？那么靶原子会反冲并震荡一会儿，但由于没有足够能量冲出原来的位置，最终这个能量会被转移给新的声子。 在 TRIM 右边名为 %EnergyLoss的选项框可以将入射粒子能量以包括声子的不同类型进行统计。入射粒子会将其入射能量190keV的 0.44%产生声子，而反冲原子贡献了额外的 28.8%，两者总共为 29.2%。乘以离子总能量，可以得到每个入射离子产生 190keV×29.2%&#x3D;55keV的声子。假设声子直接附加到靶温度中去，这会使得靶变得非常炽热。 接下来是展示靶的损伤是如何产生的。 在Plot窗口中点击 Energy to Recoils，会有弹窗询问是关于Energy from Ions(离子中的能量)还是Energy absorbed by Silicon atoms(硅原子吸收的能量)，任意选择一个即可(因为所有离子沉积的能量都被硅原子吸收了，对于单元素靶这两种图是相同的。如果靶中不止一种元素，而且想看到每一种元素吸收了多少能量时这个选项才是重要的)。 通过图像我们可以看出，转移给靶原子的能量在离子平均射程（约为2500A）之前几乎保持不变，随后它随着离子的停止迅速减小。其他的离子&#x2F;靶组合情况可能与此非常不同。 有多少的能量转移给了级联反冲呢？再次查看 %EnergyLoss选项框，我们可以将沉积到反冲原子中的能量累加起来: 24%+3%+29%&#x3D;56%&#x3D;106keV。因而离子直接地沉积了44%的能量给靶原子,而放弃了56%的能量给级联反冲原子。 打开图像：Damage Events。一个包含了所有损伤细节的菜单会弹出。点击图像#1(Total Displacements）,#2(TotalVacancies)和#3（Replacement Collisions）。然后点击：Show Plot Numbers 1 2 3。 顶部的曲线展示了 Total Target Displacements。这是被撞击出它们原本靶晶格中位置的原子数。接下来往下的一条曲线展示的是 Target Vacancies。这个相比靶错位曲线较低，表明空位数相比错位数较少。 最底部的曲线展示的是 Replacement Collisions。这些是入射原子失掉了几乎所有能量后不足以再继续往前走而进入反冲靶原子遗留下来的孔穴中所产生的错位。也就是说它撞击出来一个靶原子，然后在晶格中替代它。由于是相同的元素，结果在靶中没有变化。正如你能看到的，较低的两条曲线的和等于较高的错位曲线。记得在级联反冲中的物理中展示的方程吗：$$错位&#x3D;空位+复位碰撞$$在这个情形中，几乎10%的错位原子没有剩下空位，而是被另一个硅原子替代了。 未完待续…随缘更新了。","categories":[{"name":"软件学习","slug":"软件学习","permalink":"http://paneersblog.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"SRIM","slug":"SRIM","permalink":"http://paneersblog.github.io/tags/SRIM/"}]},{"title":"win批处理语法","slug":"win批处理语法","date":"2022-02-21T15:21:26.000Z","updated":"2022-07-16T09:31:08.877Z","comments":true,"path":"52445.html","link":"","permalink":"http://paneersblog.github.io/52445.html","excerpt":"win批处理语法","text":"win批处理语法 常用命令%~dp0 [获取当前路径] 12345%~dp0 “d”为Drive的缩写，即为驱动器，磁盘、“p”为Path缩写，即为路径，目录cd %~dp0 ：进入批处理所在目录cd %~dp0bin\\ ：进入批处理所在目录的bin目录 %cd%[执行的路径]当前执行的路径，并非目标文件的路径 taskkill &#x2F;f &#x2F;im notepad.exe [终止进程]taskkill &#x2F;?打开帮助 cmd窗口中文乱码在CMD窗口右键&#x2F;默认值，打开属性选择 “默认代码页为简体中文GBK” 获取命令帮助 xxx &#x2F;?遇到记不清楚的命令，但记得名字，就可以键入 命令名 空格 &#x2F;?就会有详细的该命令的帮助了，比如：ping &#x2F;? cd &#x2F;? 一、基础语法 批处理文件是一个“.bat”结尾的文本文件，这个文件的每一行都是一条DOS命令。可以使用任何文本文件编辑工具创建和修改。 批处理是一种简单的程序，可以用 if 和 goto 来控制流程，也可以使用 for 循环。 批处理的编程能力远不如C语言等编程语言，也十分不规范。 每个编写好的批处理文件都相当于一个DOS的外部命令，把它所在的目录放到DOS搜索路径(path)中，即可在任意位置运行。 C:\\AUTOEXEC.BAT 是每次系统启动时都会自动运行的，可以将每次启动时都要运行的命令放入该文件中。 大小写不敏感(命令符忽略大小写) 批处理的文件扩展名为 .bat 或 .cmd。 在命令提示下键入批处理文件的名称，或者双击该批处理文件，系统就会调用Cmd.exe来运行该文件。 二、参数1.系统参数%SystemRoot% === C:\\WINDOWS (%windir% 同样) %ProgramFiles% === C:\\Program Files %USERPROFILE% === C:\\Documents and Settings\\Administrator (子目录有“桌面”,“开始菜单”,“收藏夹”等) %APPDATA% === C:\\Documents and Settings\\Administrator\\Application Data %TEMP% === C:\\DOCUME~1\\ADMINI1~\\LOCALS~1\\Temp (%TEM% 同样) %APPDATA% === C:\\Documents and Settings\\Administrator\\Application Data %OS% === Windows_NT (系统) %Path% === %SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem (原本的设置) %HOMEDRIVE% === C: (系统盘) %HOMEPATH% === \\Documents and Settings\\Administrator :: 枚举当前的环境变量 setlocal enabledelayedexpansion FOR /F &quot;usebackq delims==&quot; %%i IN (set) DO @echo %%i 2.传递参数给批处理文件%[1-9]表示参数，参数是指在运行批处理文件时在文件名后加的以空格(或者Tab)分隔的字符串。 变量可以从%0到%9，%0表示批处理命令本身，其它参数字符串用 %1 到 %9 顺序表示。 举例如下(括号内容仅作为解释说明，运行时请删除)： 1234567891011call test2.bat &quot;hello&quot; &quot;haha&quot; (执行同目录下的“test2.bat”文件，并输入两个参数)在“test2.bat”文件里写:echo %1 (打印: &quot;hello&quot;)echo %2 (打印: &quot;haha&quot;)echo %0 (打印: test2.bat)echo %19 (打印: &quot;hello&quot;9) 三、批处理基本命令0.help 命令语法： 命令 &#x2F;? 可显示此命令的帮助信息 Sample： 123type /? &gt;&gt;tmp.txt (把 type 命令的帮助信息写入到tmp.txt文件里)help type (显示跟“type /?”一样) 1.echo 命令语法: echo [{on|off}] [message] ECHO [ON | OFF] 打开回显或关闭回显功能。 ECHO 显示当前回显设置。 ECHO [message] 显示信息。 echo off 表示在此语句后所有运行的命令都不显示命令行本身；默认是on，on时会显示如： C:\\文件夹路径&gt;命令行。 在实际应用中我们会把这条命令和重定向符号( 也称为管道符号，详见DOS基础命令，一般用 &gt; &gt;&gt; ^ )结合来实现输入一些命令到特定格式的文件中。 1234567echo offecho hello world (显示出“hello world”)echo Windows Registry Editor Version 5.00 &gt; c:\\setupreg.reg (此前还没有 setupreg.reg 这个文件)echo &quot;SourcePath&quot;=&quot;D:\\\\Win2003\\\\&quot; &gt;&gt; c:\\setupreg.reg (追加内容进 setupreg.reg 这个文件) 2.@ 命令表示不显示@后面的命令，(在入侵过程中自然不能让对方看到你使用的命令啦 手动狗头) @ 与 echo off 相象，但它是加在每个命令行的最前面，表示运行时不显示这一行的命令行(只能影响当前行)。 12345@echo off (此语句常用于开头，表示不显示所有的命令行信息，包括此句)@echo please wait a minite...@format X: /q/u/autoset (format 这个命令是不可以使用&#x2F;y这个参数的，可喜的是微软留了个autoset这个参数给我们，效果和&#x2F;y是一样的。) 3.Goto 命令语法：goto label (label是参数，指定所要转向的批处理程序中的行。) 指定跳转到标签行，找到标签行后，程序将处理从下一行开始的命令。 label标签的名字可以随便起，但是最好是有意义的，字母前必须加个冒号“:”来表示这个字母是标签。 goto命令就是根据这个冒号来寻找下一步跳到到那里。经常与 if 配合使用，根据不同的条件来执行不同的命令组。 例子在下文的 5.Pause命令 4.Rem 命令语法：Rem Message (小技巧：用::代替rem) 注释命令，在C语言中相当与&#x2F;…&#x2F;,它并不会被执行，只是起一个注释的作用，便于别人阅读和自己日后修改。 1@Rem Here is the description. 5.Pause 命令会暂停批处理的执行并在屏幕上显示Press any key to continue…的提示，等待用户按任意键后继续 1234567891011@echo off:begincopy a:*.* d:\\backecho Please put a new disk into driver Apausegoto begin 在这个例子中，驱动器 A中磁盘上的所有文件均复制到d:\\back中。 显示的信息提示您将另一张磁盘放入驱动器 A 时，pause 命令会使程序挂起，以便您更换磁盘，然后按任意键再次复制。 6.call 命令语法: call [[Drive:][Path] FileName [BatchParameters]] [:label [arguments]] 参数: [Drive:][Path] FileName 指定要调用的批处理程序的位置和名称。filename 参数必须具有 .bat 或 .cmd 扩展名。 调用另一个批处理程序，并且不终止父批处理程序。 如果不用call而直接调用别的批处理文件，那么执行完那个批处理文件后将无法返回当前文件并执行当前文件的后续命令。 call命令接受用作调用目标的标签。如果在脚本或批处理文件外使用 call，它将不会在命令行起作用。 123call=&quot;%cd%\\test2.bat&quot; haha kkk aaa (调用指定目录下的 test2.bat，且输入3个参数给他)call test2.bat arg1 arg2 (调用同目录下的 test2.bat，且输入2个参数给他) 注：可以调用自身(死循环、递归) 7.start 命令调用外部程序，所有的 DOS命令和命令行程序都可以由 start命令来调用。 常用参数： MIN 开始时窗口最小化 SEPARATE 在分开的空间内开始 16 位 Windows 程序 HIGH 在 HIGH 优先级类别开始应用程序 REALTIME 在 REALTIME 优先级类别开始应用程序 WAIT 启动应用程序并等候它结束 parameters 这些为传送到命令&#x2F;程序的参数 123start /MIN test2.bat arg1 arg2 (调用同目录下的 test2.bat，且输入2个参数给他，且本窗口最小化)e:\\&quot;program files&quot;\\列车时刻表\\skb.exe (文件路径名有空格时“ ”是必要的) 8.if 命令if 表示将判断是否符合规定的条件，从而决定执行不同的命令。有三种格式: 1.if语法: if [not] “参数” &#x3D;&#x3D; “字符串” 待执行的命令 参数如果等于(not表示不等，下同)指定的字符串，则条件成立，运行命令，否则运行下一句。(注意是两个等号) 123if &quot;%1&quot; == &quot;a&quot; format a:if &#123;%1&#125; == &#123;&#125; goto noparms 2.if exist语法: if [not] exist [路径]文件名 待执行的命令 如果有指定的文件，则条件成立，运行命令，否则运行下一句。 123if exist config.sys edit config.sys (表示如果存在这文件，则编辑它，用很难看的系统编辑器)if exist config.sys type config.sys (表示如果存在这文件，则显示它的内容) 3.if errorlevel number语法: if [not] errorlevel &lt;数字&gt; 待执行的命令 如果程序返回值等于指定的数字，则条件成立，运行命令，否则运行下一句。(返回值必须按照从大到小的顺序排列) 123456789@echo offXCOPY F:\\test.bat D:\\IF ERRORLEVEL 1 (ECHO 文件拷贝失败) Else IF ERRORLEVEL 0 ECHO 成功拷贝文件pause 很多DOS程序在运行结束后会返回一个数字值用来表示程序运行的结果(或者状态)，称为错误码errorlevel或称返回码。 常见的返回码为0、1。通过if errorlevel命令可以判断程序的返回值，根据不同的返回值来决定执行不同的命令。 4.else语法： if 条件 (成立时执行的命令) else (不成立时执行的命令) 如果是多个条件，建议适当使用括号把各条件包起来，以免出错。 1if 1 == 0 ( echo comment1 ) else if 1==0 ( echo comment2 ) else (echo comment3 ) 注：如果 else的语句需要换行，if执行的行尾需用“^”连接，并且 if执行的动作需用(括起来)，否则报错 12if 1 == 0 ( echo comment1 ) else if 1==0 ( echo comment2 ) ^else (echo comment3 ) 5.比较运算符1234567891011EQU - 等于 (一般使用“==”)NEQ - 不等于 (没有 “!=”,改用“ if not 1==1 ”的写法)LSS - 小于LEQ - 小于或等于GTR - 大于GEQ - 大于或等于 9.choice 命令choice 使用此命令可以让用户输入一个字符(用于选择)，从而根据用户的选择返回不同的 errorlevel， 然后配合 if errorlevel 选择运行不同的命令。 注意：choice命令为DOS或者Windows系统提供的外部命令，不同版本的choice命令语法会稍有不同，请用choice &#x2F;?查看用法。 choice 使用此命令可以让用户输入一个字符，从而运行不同的命令。 使用时应该加&#x2F;c:参数，c:后应写提示可输入的字符，之间无空格。它的返回码为1234…… 1choice /c:dme defrag,mem,end 将显示: 1defrag,mem,end[D,M,E]? 12345678choice /c:dme defrag,mem,endif errorlevel 3 goto defrag (应先判断数值最高的错误码)if errorlevel 2 goto memif errotlevel 1 goto end 10.for 命令for 命令是一个比较复杂的命令，主要用于参数在指定的范围内循环执行命令。 语法结构 1`for &#123;%variable | %%variable&#125; in (set) do command [command-parameters]` %variable 指定一个单一字母可替换的参数。变量名称是区分大小写的，所以 %i 不同于 %I 在批处理文件中使用 FOR 命令时，指定变量建议用 %%variable而不要用 %variable。 (set) 指定一个或一组文件。可以使用通配符。 command 指定对每个文件执行的命令。 command-parameters 为特定命令指定参数或命令行开关。 如果命令扩展名被启用，下列额外的 FOR 命令格式会受到支持: 1.FOR &#x2F;D %variable IN (set) DO command [command-parameters] 如果集里面包含通配符，则指定与目录名匹配，而不与文件名匹配。 2.FOR &#x2F;R [[drive:]path] %variable IN (set) DO command [command-parameters] 检查以 [drive:]path 为根的目录树，指向每个目录中的FOR 语句。 如果在 &#x2F;R 后没有指定目录，则使用当前目录。如果集仅为一个单点(.)字符，则枚举该目录树。 3.FOR &#x2F;L %variable IN (start,step,end) DO command [command-parameters] 该集表示以增量形式从开始到结束的一个数字序列。 如：(1,1,5) 将产生序列 1 2 3 4 5； 而(5,-1,1) 将产生序列 (5 4 3 2 1)。 4.有或者没有 usebackq 选项: FOR &#x2F;F [“options”] %variable IN (file-set) DO command FOR &#x2F;F [“options”] %variable IN (“string”) DO command FOR &#x2F;F [“options”] %variable IN (command) DO command 参数”options”为: eol&#x3D;c - 指一个行注释字符的结尾(就一个,如“;”) skip&#x3D;n - 指在文件开始时忽略的行数。 delims&#x3D;xxx - 指分隔符集。这个替换了空格和跳格键的默认分隔符集。 tokens&#x3D;x,y,m-n - 指每行的哪一个符号被传递到每个迭代的 for 本身。这会导致额外变量名称的分配。 m-n格式为一个范围。通过 nth 符号指定 mth。 如果符号字符串中的最后一个字符星号，那么额外的变量将在最后一个符号解析之后分配并接受行的保留文本。 usebackq - 指定新语法已在下类情况中使用: 在作为命令执行一个后引号的字符串并且一个单引号字符为文字字符串命令并允许在 filenameset中使用双引号扩起文件名称。 Sample: 1234567891011121314151617181920212223242526272829303132333435363738394041:: 如下命令行会显示当前目录下所有以bat或者txt为扩展名的文件名。for %%c in (*.bat *.txt) do (echo %%c)::如下命令行会显示当前目录下所有包含有 e 或者 i 的目录名。for /D %%a in (*e* *i*) do echo %%a:: 如下命令行会显示 E盘test目录 下所有以bat或者txt为扩展名的文件名。for /R E:\\test %%b in (*.txt *.bat) do echo %%bfor /r %%c in (*) do (echo %%c) :: 遍历当前目录下所有文件:: 如下命令行将产生序列 1 2 3 4 5for /L %%c in (1,1,5) do echo %%c:: 以下两句，显示当前的年月日和时间For /f &quot;tokens=1-3 delims=-/. &quot; %%j In (&#x27;Date /T&#x27;) do echo %%j年%%k月%%l日For /f &quot;tokens=1,2 delims=: &quot; %%j In (&#x27;TIME /T&#x27;) do echo %%j时%%k分:: 把记事本中的内容每一行前面去掉8个字符setlocal enabledelayedexpansionfor /f %%i in (zhidian.txt) do (set atmp=%%iset atmp=!atmp:~8!if &#123;!atmp!&#125;==&#123;&#125; ( echo.) else echo !atmp!):: 读取记事本里的内容(使用 delims 是为了把一行显示全,否则会以空格为分隔符)for /f &quot;delims=&quot; %%a in (zhidian.txt) do echo.%%a continue 和 break 利用 goto 实现程序中常用的 continue 和 break 命令, 其实非常简单 continue: 在 for 循环的最后一行写上一个标签，跳转到这位置即可 break: 在 for 循环的外面的下一句写上一个标签，跳转到这位置即可 Sample: (伪代码) 123456789101112131415for /F [&quot;options&quot;] %variable IN (command) DO (... do command ...if ... goto continueif ... goto break... do command ...:continue):break 四、其他命令1.ping命令测试网络联接状况以及信息包发送和接收状况。但是不能够测试端口。 语法：ping IP地址或主机名 [-t] [-a] [-n count] [-l size] 参数含义： -t 不停地向目标主机发送数据； -a 以IP地址格式来显示目标主机的网络地址； -n count 指定要Ping多少次，具体次数由count来指定； -l size 指定发送到目标主机的数据包的大小。 Sample: 123ping 192.168.0.1 -t (不停的测试192.168.0.1，按ctrl+c停止)for /L %%a in (0,1,255) do ping 192.168.0.%%a -n 1 &gt;&gt; tmp.txt (ping一下所有的局域网电脑) 2.telnet 命令测试端口使用 telnet IP地址或主机名 端口，使用tcp协议的 Sample: 1telnet 192.168.0.1 80 (测试192.168.0.1的80端口) 3.color 命令设置背景及字体颜色 语法： color bf b 是指定背景色的十六进制数字 f 指定前景颜色(即字体颜色)。 颜色值: 0:黑色 1:蓝色 2:绿色 3:湖蓝 4:红色 5:紫色 6:黄色 7:白色 8:灰色 9:淡蓝 A:淡绿 B:浅绿 C:淡红 D:淡紫 E:淡黄 F:亮白 如果没有给定任何参数，该命令会将颜色还原到 CMD.EXE 启动时的颜色。 如果两参数一样，视为无效输入。只有一个参数时，设置字体。 4.random 命令产生随机数(正整数0~) 5.exit 命令结束程序。即时是被调用的程序，结束后也不会返回原程序 6.hutdown命令shutdown -s 关机 五、文件处理1.删除1.删除一个文件或多个文件 1del /s /q /f d:\\test\\a.bat 将直接删除d:\\test\\a.bat，没有任务提示 1del temp\\* /q /f /s 将直接删除 本目录的 temp 目录的所有文件，没有任务提示 删除文件的时候可以使用“*”作通配符 2.删除一个空目录 1rd /q /s d:\\test\\log 将直接删除d:\\test\\log目录，如果log目录里面有文件将无法删除 3.删除一个非空目录 (必须指定目录名称) 1rmdir /q /s d:\\test\\logs 必须指定目录名称，不能使用通配符 &#x2F;S 除目录本身外，还将删除指定目录下的所有子目录 &#x2F;Q 安静模式，带 &#x2F;S 删除目录树时不要求确认 无论里面是否有文件或文件夹将全部直接删除 2.创建目录123MKDIR [drive:]pathMD [drive:]path 路径有空格时，可以用双引号括起来，也可以用 &amp;nbsp; 替代 就这样吧 有想法再说 参考","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"DOS","slug":"DOS","permalink":"http://paneersblog.github.io/tags/DOS/"}]},{"title":"SRIM入门（三）","slug":"SRIM入门（三）","date":"2022-02-19T16:00:42.000Z","updated":"2022-07-16T09:31:27.677Z","comments":true,"path":"31090.html","link":"","permalink":"http://paneersblog.github.io/31090.html","excerpt":"demo3 复合靶的创建","text":"demo3 复合靶的创建 前文已经描述了如何设置TRIM，如何确定一个n型半导体井的注入离子种类、能量以及如何估算在半导体注入过程中的损伤。此demo将描述创建一个气体固体复合结构的载能离子气体电离探测器。 设定一个装置，由一个长的圆柱体构成。在其左边有一个非常狭窄的入射窗口，它由一种名为 Paralence “C”的聚合物制成，仅为 1um的薄膜。它能够让束流进入探测器时损失最少的能量。这个探测器内部充有名为 P-10的气体，其成分为 10%甲烷和 90%氩气。氩气原子被粒子电离，然后放出的电子被电场清除出去。有一种可能是电离气体流会导致击穿，并且 10%的甲烷气体会“猝息”过多的电荷堆积。最后在末端有一个“束流截止”靶。束流需要全部被截止在 P-10气体中，通常会使用一个足够厚的尾部平板以确保安全。 我们在 SRIM中创建这个探测器，来用作创建复合靶的例子。通过 SRIM我们可以估计当一个束流进入探测器时会发生什么。 首先我们打开 SRIM，选择 TRIM Calculation，打开 TRIM Demo，在第二列底部选择靶”He(5MeV)into Gas Ionization Detector”，然后点击 Save Input and Statr TRIM开始计算(或许会有一个弹窗，是关于靶密度的提醒，点击 Yes即可)。 这样设置可以提供给我们气体电离探测器的靶细节信息。 另外有几点需要注意： 所有的离子在到达底部的束流截止靶前应停止下来 我们得到的图像只展示了靶的一部分。注意横坐标，显示的距离为 40nm到 50nm处的深度。也就是说是将该深度的部分进行了放大，这使得我们可以更详细的看到离子最终的径迹 狭窄的入射窗口没有画出，但实际上是存在的。当我们将所选区域放大时它所在的第一层就不显示在图中了。 此时我们可以查看几张计算得到的图像，但是我们看不到反冲原子或是溅射原子。这是因为他们在这个计算中被忽略了。 接下来我们要手动建立一个相同的设置来展示如何在 TRIM中创建一个复合靶。首先关闭计算窗口，弹窗点否。 点击 Clear All清空所有条目 输入离子信息(ION DATA) 在 Ion Data中输入氦 输入离子能量(以5MeV为例) 入射角度垂直，故保持不变 输入靶信息(分为三层：表面薄膜、长圆柱气体以及黄铜束流截止靶) 首先是Paralence “C”薄膜。用快捷的方式输入它。 在 TARGET DATA右边有 Compound Dictionary按钮，点击它。 此时我们会得到300多种混合物，Paralence “C”是一种商品名称，我们要知道它的确切名字或者查阅冗长的商品名称列表来寻找它。 点击 PLASTICS&#x2F;POLYMERS，在展开的列表中我们可以找到“Polychloro-p-xylyene&#x2F;Paralene-C”。此时我们会得到关于他的一些信息。点击Paralene-C，然后点击 Add to Current Layer，会有弹窗提示是否使用该化合物的阻止本领修正，选择是就对了 此时第一层已经OK了，对于其厚度(width，默认为10000Ang)，10000A&#x3D;1um，故不需改动，可以创建第二层了 点击 Add New Layer，键入该层的名字如：P-10 Gas。然后在右侧通过点击 PT来添加Ar和CH4。 Ar作为单质可以直接添加，CH4要分别添加 C和 H。 现在我们来设置每种元素的数量。已知90%的Ar和10%的CH4，这是质量百分比，在 SRIM中使用原子百分比。可通过相对原子数，分别在Ar、H、C的 Atom.Stoich.列中输入64、29、7(具体计算不展开了，很简单)，然后SRIM会自动将其归一化为正确的比例。 另外，在该层旁边要勾选“Gas”，然后将密度修改为气体密度，0.00125 最后将该层的厚度改为 49mm 新建束流截止靶，层名字尽量简洁，可用：Brass 为了简化输入，可仍使用 Compound Dictionary按钮，点击METAL&#x2F;ALLOYS 找到 Brass(typical)，点击它然后点击 Add New Element to Layer，弹窗点 是 黄铜中包换铜、锌和铅。除了层厚，所有的数据都已经填好了。我们将厚度设置为 2.5mm，记得下拉单位菜单选择“mm” 这就完成了计算的设定。注意到我们没有像在之前（demo2）一样在窗口的顶部改变计算类型（“Type of TRIM Calculation”)。我们想要看在运行计算程序时将会发生什么，所以现在我们在使用快速损伤计算(默认)。特别是我们并不确定是否设定了足够厚的气体靶来截止所有的离子，我们将运行TRIM来看看将发生什么然后调整尺寸。 点击 Save Input and Run TRIM开始计算 如果输入信息无误的话，我们将会得到粒子运动的轨迹图像，我们可以通过修改计算来得到更多更详细的信息。 在 TRIM窗口点击 PAUSE 点击 Change TRIM 此时我们想要查看离子射程末尾的细节。 展开图像窗口。在左边你可以看到一个名为 PLOT Window 的表格。 在其下方是数字 0A-515010000A。这意味着这个图像显示了从表面 0 埃到 51.5mm 最深处的整个靶的情况。改变左窗口的值为40mm&#x3D;400000000A（8个零）。改变右窗口的值为50mm&#x3D;500000000A（8个零）。这将会产生一个专门显示射程末端的窗口。 在窗口的顶部点击 End Edit键。 将会有一个弹窗告诉你你将重新开始 TRIM计算。点击Yes继续，TRIM将重新启动。 这时你的图像应该和你执行 DEMO 所得到的相同。 注意到离子在它们行程的末尾之前都具有很好的方向性。它们初始速度很大，使得它们无法与靶发生强相互作用。靶中的传导电子具有相当于每核子25keV的速度（氦离子的速度大约为100keV，因为氦离子具有4个原子质量单位）。这是在氦和靶电子之间发生最大强度相互作用的能量。氦和靶核之间的相互作用只有在这个能量以下才是显著的。因而直到氦离子能量降到 100keV，也就是初始能量 5MeV的2%以下前，氦离子束一直被紧紧地聚焦着。 接下来看几张图。点击 Pause TRIM 点击Ion Distribution。 你将会看到一个漂亮的高斯分布，中心位于 46.6mm 处。它非常窄，歧离度不到深度的2%。 点击 Ionization。 这张图展示了耗散到靶电子中去的能量。注意到在图像的底部是非常小的反冲原子电离的贡献（蓝线）。超过 99%转移给电子的能量损失是通过和离子的直接作用发生的。 点击 Phonons。 这个图像恰好显示了与靶中产生声子相反的趋势。现在靶中反冲原子占据了能量损失的主要成分。注意坐标的单位，声子能损大约是由于靶电子发生的离子能损的 1%。 事实上，反冲原子给靶电子的贡献和声子（损失给靶原子）大致相当。离子损失给声子的能量几乎为零（看图中灰暗的红色虚线）。我们可以查看窗口右面叫做（(%ELOSS的表格，这里可以看到能量损失的相对分布。直接损失给靶电子的能量大约是离子能量损失的 99%，而其他的损失则是相当微小的。 TRIM设置窗口的tips: 在左下角有一个带有输入框的命令“AutoSave at Ion#”。在一定数量的离子后 TRIM会自动保存计算结果。当我们通宵运行 TRIM时，这个特色工具确保了即使出现断电情形也会有信息被存储下来。默认值是10000个离子。你可以使用 Resume Saved TRIM命令来查看已经计算好的结果。 下一个命令是 Total Number of Ions（默认为 99999）。若使用略有不同的离子或靶得到相同的计算结果，这一命令在对它们进行比较时非常有用。但所有设定的离子计算完成时，它会保存计算结果并停止。 下一个命令是随机数产生器（默认为空白）。它用于计算人工制造的事件（奇异事件）。例如，也许在 10000 个离子中可能只有一次机会使某个离子能够和表面原子发生强烈的碰撞，产生一个强级联反冲。如果你想保存典型的图像，有时这些罕见的事件会产生不正常的图像造成干扰。输入任意数字（1就可以）然后你将得到一个完全不同的计算结果。如果没有数字被键入，那么这个默认的数值是16381，它是深入钻研随机数理论的人所崇敬的一个数字(我也不是很懂)。 更新预告：靶损伤计算","categories":[{"name":"软件学习","slug":"软件学习","permalink":"http://paneersblog.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"SRIM","slug":"SRIM","permalink":"http://paneersblog.github.io/tags/SRIM/"}]},{"title":"SRIM入门（二）","slug":"SRIM入门（二）","date":"2022-02-16T15:29:36.000Z","updated":"2022-07-16T09:32:44.885Z","comments":true,"path":"19550.html","link":"","permalink":"http://paneersblog.github.io/19550.html","excerpt":"demo2 靶的混合和溅射","text":"demo2 靶的混合和溅射 demo1主要介绍了如何设置TRIM，如何确定一个n型井的注入离子和能量以及如何估算在注入过程中的损伤。此demo2将介绍其他粒子与固体的相互作用。 界面混合和溅射界面混合是原子从一层靶被输运到另一层靶的过程。通常这是不希望产生的效应。我们已经看到了离子如何将大量的能量转移给反冲原子并使其移动很长的距离,产生显著的级联碰撞。当一个反冲原子穿过一个靶层进入另一个时，该靶层就被污染了。 然而有一些特例是特意应用反冲混合进行材料改性，这个过程被叫做“反冲注入”。这个技术用于一些操作起来很难或者具有危险性的材料的注入，例如包含放射性物质材料的合成。例如将很薄的一层钙沉积在硅靶上，然后将其放置在一个核反应堆中使钙转化成射性同位素。之后硅靶被放置在离子注入机中并将大剂量的氙（Xe）注入到钙层中去。氙离子就会将一些放射性物质撞击到硅靶中去并使其停留于其中。在移除所有剩余在表面的钙原子后，含有放射性钙的硅靶就可以被安全地处理了。若需要提供一个能释放出放射性离子（此处来自于钙原子）而危险性又远低于纯的放射性钙靶的样品,这样的一个靶是很合适的。 溅射是和反冲注入相反的一个过程。表面原子通过产生的级联反冲往回冲出靶，并具有足够的能量能够离开靶并脱离靶表面。表面会施加给原子一种结合力，即所谓表面结合能Esurf。由于靶表面的原子并不是在一个面上被束缚住的，因而要使它从其晶格中移位所需的能量比它在固体内部被其他原子围绕时要小。一个表面原子所受到的电子约束更小。对固体而言，Esurf通常小于移位能Edisp。 此时我们可以借助TRIM中自带的demo来进行更好的理解。接下来我们以其中几个例子来讲述靶混合与靶溅射。 打开SRIM软件 进入TRIM Calation 窗口 点击位于界面左上角的 TRIM DEMO 此时你会看到12个示例的设置，他们展示了在不同的应用中 TRIM 可以如何被使用。 我们以 Xe into Si&#x2F;Pt&#x2F;Si(Mixing a Marker) 为例，点击它查看各种输入参数 点击 Save Input and Run TRIM，程序就会立刻开始计算 靶混合上述例子展示了在硅靶中间的一个铂的薄层，它用来展示相互混合效应能够有多大。 点击选择图像：Ion&#x2F;Recoil Distribution。在弹出的子菜单中选择“ 2-SiliconRecoil Distribution”和4-Silicon Recoil Distribution”，然后点击Plot。这两类反冲硅原子的分布将会用两种不同颜色绘制以区分。 就在不到100个离子入射之后，含有铂的空隙就开始被硅原子填充了。在进行到 400 个原子时，这个层将会有接近5%的硅原子。对于如氙（原子序数为54）这样的重离子，原子向这个层中的转移的效率将会很高。 现在我们关闭这个图像窗口，点击图像：Ion&#x2F;Recoil Distribution。在弹出的子菜单中选择3-PlatinumRecoilDistribution，然后点击Plot。 这个图像展示了铂层中的原子，以及其中的多少已经进入了硅中。尤其值得注意的是朝着表面移位的铂原子数非常大，比例达 50%，和被驱使深入到靶中的铂原子数相当。 这是非常值得注意的！离子都在进入深入靶中的方向，并且所有的初始反冲粒子一般也是朝着与入射粒子相同的方向，也就是深入靶中。可是最后原子为何能停留在比它们开始时更接近表面的位置呢？ 为了得到其中缘由，点击 XY Longitudinal 图像来展示每个离子以及它造成的移位（这个图像在CollisionPlots部分）在这个图像的底部有一个标记为 -Clear 的按键。这将会清除图像使得你可以看到单个粒子和它产生的级联反冲。离子径迹是一条稀疏的红色点状线，所有的级联反冲都由此开始。每个级联反冲（不是离子的级联反冲）开始都是朝着向前的方向，但是随后其方向很快变为向各个方向随机分布。稠密的级联反冲的轨迹看上去分布于没有特定取向的绿色球状空间中级联反冲牵涉到如此多的粒子,（其中包含的信息量如此之大）以至于任何初始离子方向的信息都迅速被丢失了。这个级联反冲变成了各向同性的事件，即原子会朝一个方向运动的概率大致相当（注意：对于不同性能的电脑，可能需要按下“Clear”键后再在TRIM 窗口的顶部按下“Pause”,然后会在下一个离子进入后停止展示） 这就是使铂原子朝着表面移动的原因。这些大的级联反冲会迅速失去原有的前进方向方向而变得具有向各个方向运动的可能。其发生的程度大小可以用被向前散射并深入到硅靶中的铂原子数和朝表面散射的铂原子数的差分来衡量。 第二个需要注意的问题是铂原子移动的距离很长。初始的铂原子层厚度为30埃。使用不超过500个入射粒子进行模拟，你将能够看到有铂原子被推出30埃的铂原子层以外。 此时我们可以去到TRIM DISTRIBUTIONS 选项框然后点击 File 选择 Ion&#x2F;Recoil Distributions命令，我们将会得到一张数据表格，它比图像展示了更多的细节。这个文件被放置在SRIM文件夹下的SRIMOutputs中，并被命名为RANGE.txt。其数据显示，一些铂原子到达深入表面 100 埃的位置，而其他部分原子已经到达了靶的背面。反冲效率如此之高，以至于在使用不到500个入射粒子时已经有铂原子移位并穿过了硅靶。如果 TRIM 再使用几千个离子进行模拟，一些铂原子将会穿出靶的背面并与靶分离。 为了理解下文即将提到的靶溅射，我们应让程序继续计算，至少有1000个离子模拟完成。 靶溅射溅射是指近表面原子从靶中脱离的现象。当一个级联反冲给靶原子一个大于其表面结合能的能量时，原子可能会被溅射。而实际上要发生溅射时，原子穿过表面时它垂直于表面方向的动能必须大于表面结合能。表面溅射以溅射率描述，其定义为每个入射粒子所能溅射出的平均靶原子数。如果靶由若干种元素组成，每种元素都溅射率具有相应的溅射率。$$溅射率&#x3D;溅射出的原子数&#x2F;入射粒子数$$特定种类的原子的表面结合能（SBE）目前只对于几种材料是已知的，但通常可以使用升华热来进行估计。典型值是：镍Ni（4.46eV）、铜Cu（3.52eV）、钯Pd（3.91eV）、银Ag（2.97eV）、铂Pt（5.86eV）和金Au（3.80eV）。当你设置 TRIM计算时这些值将会被提示。 关于溅射我们应了解： 对于溅射而言，只有朝向靶表面的级联反冲是重要的。因而通常只使用单个薄靶来模拟溅射就足够了。以相对原子质量超过20的重离子为例，通常一个厚为300埃的靶就足够了。使用非常薄的靶可以减少用于计算对溅射无贡献的级联反冲的时间。对于像氦这样的轻离子，由于离子可以在靶的深层产生背散射并造成表面的溅射，使用较厚（比如1000 埃）的靶，就十分必要。一次计算所需要的靶深度可以通过运行几个快速的情形进行估算，即采用变化厚度的靶进行计算，然后看看在哪个厚度溅射率趋向于常值。 溅射率对表面结合能（SBE）（而表面结合能是需要输入的一个计算参数）非常敏感。注意，对于真实的表面，这个能量随着离子轰击会由于表面粗糙度、损伤以及化合物的表面化学计量的变化而变化。溅射率对表面结合能的敏感度可以在计算时通过使用图像菜单来展现。溅射率对SBE图像可以精确到大约30%。 对于低能离子入射情况下靶中的级联反冲（溅射的一个主要贡献），TRIM 为计算散射 ， 采 用 了 以 下 文 献 中 的 硬 球 模 型 ： J.P.Biersackand W. Eckstein,Appl.Phys.,A34,73-94(1984) 一些离开靶的级联反冲原子可能是从比表面区域更深的靶内部出来。我们能够发现，一些铂原子是从超过200埃深的靶内部碰撞后溅射出来的。现在看着 TRIM 窗口右边名为 SPUTTERING YIELD(SY) 的部分。这给出了每个入射粒子溅射出的原子数。其显示每个入射粒子会溅射出大约6或7个硅原子。 事实上这些离子正在产生一个洞，因为更多的原子在离开而不是到达，其比例达 6:1！进一步说，如果计算使用超过1000个离子,你将会看到甚至会有一定数量的铂原子溅射出来。给出的铂溅射率为0.005324（每200个离子约1个）。它们从靶内200埃处出发，并且某些级联反冲能量大到铂原子能够穿过顶部表面。 此时我们先点击 TRIM 窗口顶端的 PAUSE 键暂停 TRIM 的计算，在左边“DISTRIBUTIONS”的下面，点击：Integral和DifferentialSputteredAtoms 我们观察名为 Sputtering（Integral）的图像。这个图像给出了每个到达靶表面的反冲原子能量。坐标轴单位为原子&#x2F;离子（Atoms&#x2F;Ion），即每个离子将会产生对应坐标数量的能到达表面的反冲原子。图中有一条标记为3.1eV的垂线，它是表面结合能Esurf的平均值，在这个算例中为硅原子的。这条线的左边对应说明文字为 Not Sputtered（未溅射）的箭头。在3.1eV 处，到达表面时拥有超过这个能量的原子数约为7。这是被溅射出来的原子数，并且它和我们在上面的 SPUTTERING YIELD 表中看到的数字是吻合的。 下面我们来讨论一下表面结合能。这是一个原子要被溅射出来所需要的最小能量。我们应该清楚的是只有离子能量的垂直分量可以被计入。也就是说一个以入射角 45°到达表面的离子需要具有1.4倍的 Esurf才能被溅射。在下面你将绘制的图中，这个修正被自动加入了。显示的原子能量总是原子能量的垂直分量，而非其总能量。 表面结合能的值可能随着辐照而变化。这是因为溅射使得靶变得粗糙和有损伤，而较为粗糙的靶会有较小的表面结合能。当靶变粗糙时，由于每个表面原子电子束缚减弱，溅射率会上升。因此溅射的计算不包括所有的效应。尤其是当束流使表面粗糙化时，表面结合能会随着时间的变化。但是这个图像已经能够让我们估计随着时间的变化，溅射率会有怎样的变化。我们可以看到如果表面结合能被减小一半，溅射的增加倍数小于2。即使表面结合能被减少到零，溅射率只会增加两倍。因此无论靶表面发生了什么，计算结果都会精确在两倍之内。 在图像上点击SPUTTERING（Differential）将其置顶。这是之前积分图像对应的微分图像。积分图像展示了到达表面的且能量不低于为给定能量的原子个数。而这个图像展示了到达表面的原子能量的分布。典型的能量非常低，大约为1到2eV。 停止 TRIM 计算，我们可以点击窗口的关闭键，或者点 File –&gt; Exit来停止，弹窗点 NO(指是否要进行保存，博主觉得没必要) 我们回到 TRIM 设置窗口，点击 TRIM DEMO 切换至 Sputtering:Xe into Nickel 这个demo将会带来一个极端的例子。 随着计算的进行，在一开的 XZ Longitudinal 图像中，你将会看到红色小点所代表的离子产生的错位开始在垂直线上集合成簇状。在镍中，原子之间的空隙只略大于2埃，而这正好是月牙状红色点群中点间的距离。入射离子在靶的每个单层中只能进行一次碰撞，因而当你观察这个图像时（靶的总深度小于15个原子）你可以看到实际的原子结构。在一段时间之后，绿色的点将会开始呈现出相同的条纹状。这同样是由靶中原子间距确定的。 点击 DISTRIBUTIONS 图像中的 Integral Sputtering。这个图像表明每个入射离子能溅射出超过10个的原子。但是原子能量积分的斜率相比之前的硅靶要陡得多。如果表面变得粗糙化了，靶的表面结合能降低，那么溅射率可能上升为原来的两倍甚至三倍。由于在这个算例中，我们无法知道表面的粗糙程度，溅射计算只能视为粗略的估计。表面的粗糙的取决于如多晶镍的晶粒大小等等因素。这些效应无法包含到 TRIM 计算中。 所有溅射原子的详细信息可以通过点击 File 按钮来保存。这会生成一个名为“SRIMOutputs\\SPUTTER.txt”的文件。这个文件的一个典型例子如下（注意这个文件必须使用 MS-LineDraw 字体来生成才能得到报告中的各种线条和方框） 总结：混合与溅射的计算 界面混合时原子可以从初始位置移动超过100A的距离，因而可以是一个很显著的效应 会有数量相当可观的原子向表面移动。它们也能移动很远的距离。 每个入射离子若能使超过5个原子移位，溅射可以很迅速地侵蚀表面。 一些原子会从靶的深处溅射出来，正如我们看到的铂原子从表面下超过200A处溅射出来。 尝试了win11下虚拟机跑Linux+wine来运行SRIM尝试了win11下wsl+wine来运行SRIM尝试了win11下虚拟机跑win7来运行SRIM 总结一下，想折腾的可以试试Linux+wine跑SRIM，首推win11下的wsl，戳这里可以看在适用于Linux的Windows子系统上运行Linux GUI应用（预览） 不想折腾的可以跑个win的虚拟机，但性能会相对损失较大。其次就是忍受切换语言和地区所带来的不便，使用主力机跑。或者买个新的主力机（手动狗头） 更新预告：创建复合靶","categories":[{"name":"软件学习","slug":"软件学习","permalink":"http://paneersblog.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"SRIM","slug":"SRIM","permalink":"http://paneersblog.github.io/tags/SRIM/"}]},{"title":"Linux之shell入门","slug":"Linux之shell入门","date":"2022-02-14T14:55:15.000Z","updated":"2022-07-16T09:31:56.822Z","comments":true,"path":"60132.html","link":"","permalink":"http://paneersblog.github.io/60132.html","excerpt":"虽然我用的unix，但不妨碍我对Linux的热爱！","text":"虽然我用的unix，但不妨碍我对Linux的热爱！ 先附上Linux命令大全(手册),可以查寻命令哦～ Linux之shell速查表(基础版) 指令 备注 whatis 查看命令的简短描述 ls 列出当前目录下的内容 cd 改变工作目录 pwd 打印当前目录 cp 复制文件或文件夹 less 查看文件 head&#x2F;tail 查看文件开头&#x2F;结尾 find 查找过滤文件 date 查看系统时间 cat 合并多个文件 cal 显示当前日历 which 定位程序的储存位置 whereis 定位程序 touch 修改时间属性(文件不存在则创建文件) top 实时显示进程动态 rm 删除文件和文件夹 mv 剪切文件和文件夹 mkdir 创建目录 Linux之shell命令(详细版)文件、目录操作命令写在前面：命令参数表 命令参数 意义 -f 若目标文件已存在，则会直接覆盖原文件 -i 若目标文件已存在，则会询问是否覆盖 -p 保留源文件或目录的所有属性 -r 递归复制文件和目录 -d 当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录 -l 对源文件建立硬连接，而非复制文件 -s 对源文件建立符号连接，而非复制文件 -b 覆盖已存在的文件目标前将目标文件备份 -v 详细显示cp命令执行的操作过程 -a 等价于“dpr”选项 ls命令功能：显示文件和目录的信息 ls 以默认方式显示当前目录文件列表 ls -a 显示所有文件包括隐藏文件。例如：.file 文件名称前面带小数点为隐藏文件。 ls -l 显示文件属性，包括大小，日期，符号连接，是否可读写及是否可执行 ls -lh 显示文件的大小 ls -lt 显示文件，按照修改时间排序 cd命令功能：改名目录 cd dir 切换到当前目录下的dir目录 cd / 切换到根目录 cd .. 切换到到上一级目录 cd ../.. 切换到上二级目录 cd ~ 切换到用户目录，若是root用户，则切换到&#x2F;root下 cp命令功能：copy文件 cp a b 将文件a复制为b cp /root /a . 将&#x2F;root下的文件a复制到当前目录 cp –av a_dir b_dir 将整个目录复制，两目录完全一样 rm命令功能：删除文件或目录 rm file 删除某一个文件 rm -f file 删除时候不进行提示。可以于r参数配合使用 rm -rf dir 删除当前目录下叫dir的整个目录 mv命令功能：将文件移动走，或者改名，在uinx下面没有改名的命令，如果想改名，可以使用该命令 mv a b 将文件a更名为b diff命令功能：比较文件内容 diff dir1 dir2 比较目录1与目录2的文件列表是否相同，但不比较文件的实际内容，不同则列出 diff file1 file2 比较文件1与文件2的内容是否相同，如果是文本格式的文件，则将不相同的内容显示，如果是二进制代码则只表示两个文件是不同的 comm file1 file2 比较文件，显示两个文件不相同的内容 comm -12 file1 file2 就只显示在两个文件中都存在的行 comm -23 file1 file2 只显示在第一个文件中出现而未在第二个文件中出现的行 comm -13 file1 file2 只显示在第一个文件中未出现而出现在第二个文件中的行 其中参数意义： -1 不显示只在第1个文件里出现过的列。(suppress lines unique to FILE1) -2 不显示只在第2个文件里出现过的列。(suppress lines unique to FILE2) -3 不显示在第1和第2个文件里都出现过的列。(suppress lines that appear in both files) ln命令功能：建立链接。windows的快捷方式就是根据链接的原理来实现的 ln source_path target_path 硬连接 ln -s source_path target_path 软连接 ln是linux中又一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同不的链接，这个命令最常用的参数是-s，具体用法是：ln –s 源文件 目标文件。 当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。例如：ln –s &#x2F;bin&#x2F;A &#x2F;usr&#x2F;local&#x2F;bin&#x2F;A 查看文件内容命令cat命令显示文件的内容，和DOS的type相同 cat file more命令功能：分页显示命令 more file more命令也可以通过管道符(|)与其他的命令一起使用,例如： ps ux|more ls|more tail 命令功能：显示文件的最后几行 tail -n 100 aaa.txt 显示文件aaa.txt文件的最后100行 4、vi命令(vim) vi file 编辑文件file(按“i”键进行编辑模式，Esc退出编辑，此时可使用下文提及命令) vi 原基本使用及命令： 输入命令的方式为先按[ESC]键，然后输入: :w(写入文件) :w!(不询问方式写入文件） :wq保存并退出 :q退出 q!不保存退出 5、touch命令 ouch命令有两个功能：一是创建新的空文件，二是改变已有文件的时间戳属性。 touch命令会根据当前的系统时间更新指定文件的访问时间和修改时间。如果文件不存在，将会创建新的空文件，除非指定了”-c”或”-h”选项。 语法格式： touch [参数] [文件] 附：常用参数 -a ：改变档案的读取时间记录-m ：改变档案的修改时间记录-r ：使用参考档的时间记录，与 –file 的效果一样-c ：不创建新文件-d ：设定时间与日期，可以使用各种不同的格式-t ：设定档案的时间记录，格式与 date 命令相同–no-create ：不创建新文件–help ：显示帮助信息–version ：列出版本讯息 注意：在修改文件的时间属性的时候，用户必须是文件的属主，或拥有写文件的访问权限。 基本系统命令man命令功能：查看某个命令的帮助，如果你不知道某个命令的用法不懂，可以问他，他知道就回告诉你 man -f 等同于 whatis w命令功能：显示登录用户的详细信息 who命令功能：显示登录用户 last命令功能：查看最近那些用户登录系统 date命令功能：系统日期设定 date -s 20:30:30 设置系统时间为20:30:30 date -s 2002-3-5 设置系统时期为2003-3-5 date -s &quot;060520 06:00:00&quot; 设置系统时期为2006年5月20日6点整。 clock命令功能：时钟设置 clock –r 对系统Bios中读取时间参数 clock –w 将系统时间(如由date设置的时间)写入Bios uname命令功能：查看系统版本 uname -R 显示操作系统内核的version 关闭和重新启动系统命令reboot 重新启动计算机 shutdown -r now 重新启动计算机，停止服务后重新启动计算机 shutdown -h now 关闭计算机，停止服务后再关闭系统 halt 关闭计算机 su命令功能：切换用户 su - 切换到root用户 su - paneer 切换到用户paneer 注意：“-”很关键，使用“-”，将使用用户的环境变量 监视系统状态命令top命令功能：查看系统cpu、内存等使用情况 free命令功能：查看内存和swap分区使用情况 uptime功能：现在的时间 ，系统开机运转到现在经过的时间，连线的使用者数量，最近一分钟，五分钟和十五分钟的系统负载 vmstat功能：监视虚拟内存使用情况 ps命令功能：显示进程信息 ps ux 显示当前用户的进程 ps uxwww 显示当前用户的进程的详细信息 ps aux 显示所有用户的进程 ps ef 显示系统所有进程信息 kill命令功能：干掉某个进程，进程号可以通过ps命令得到 kill -9 1001 将进程编号为1001的程序干掉 kill all -9 apache 将所有名字为apapche的程序杀死 eeeeeee好困啊不想写了，估计也没人看到这。。。 想认真学的小伙伴，推荐看一下大厂鱼皮的最快Linux入门教程+最新学习路线！程序员必备组合拳真的很赞哦～～～ 随缘填坑吧 参考blog：https://blog.csdn.net/LH0912666/article/details/87897629","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://paneersblog.github.io/tags/Linux/"}]},{"title":"DOS常用命令","slug":"DOS","date":"2022-02-13T13:44:00.000Z","updated":"2022-07-16T09:32:04.655Z","comments":true,"path":"56201.html","link":"","permalink":"http://paneersblog.github.io/56201.html","excerpt":"DOS常用命令(cmd.exe)","text":"DOS常用命令(cmd.exe) 基础命令 命令 备注 cd\\ 返回到根目录 cd.. 返回上一级目录 cd d: 切换盘符 cd a 进入a目录 md 建立目录(即新建文件夹) rd 删除目录 dir 显示目录 dir &#x2F;b 显示目录只显示文件名 dir &#x2F;p 分页显示目录 copy 复制文件 ren 更改文件名 cls 清除屏幕 del 删除文件 time 显示时间 date 显示日期 命令管道符 “|”格式： 1命令1 | 命令2 | 命令3 |... 管道命令能够将一个命令的执行结果进行筛选，只保留我们需要的信息。如： 1dir c:/ | find &quot;txt&quot; 查看文件夹目录结构顾名思义，通过“tree”来实现，如以下所示，其中“&#x2F;f”可以显示文件目录结构的同时显示文件。“&gt;”的意义详见下文。 12tree &gt; list.txttree /f &gt; list.txt “&lt;”、”&gt;”、”&lt;&lt;”、”&gt;&gt;”等 命令 备注 &gt; 输出重定向 &lt; 输入重定向 &lt;&lt; 输入追加 &gt;&gt; 输出追加 用法如下： 1sort &lt;1.txt 其作用是将“sort”得到的结果输出在“1.txt”文件中 备注： &gt;： 将命令输出写入到文件或设备（例如打印机）中，而不是写在命令提示符窗口中。 &lt;：从文件中而不是从键盘中读入命令输入。 &gt;&gt;： 将命令输出添加到文件末尾而不删除文件中的信息。 &gt;&amp;： 将一个句柄的输出写入到另一个句柄的输入中。 &lt;&amp;： 从一个句柄读取输入并将其写入到另一个句柄输出中。 |： 从一个命令中读取输出并将其写入另一个命令的输入中。也称作管道。 不定期更新，欢迎评论区补充～ 参考视频地址","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"DOS","slug":"DOS","permalink":"http://paneersblog.github.io/tags/DOS/"}]},{"title":"Python入门笔记（五）","slug":"Python入门笔记（五）","date":"2022-02-11T16:08:19.000Z","updated":"2022-07-16T09:28:48.147Z","comments":true,"path":"52970.html","link":"","permalink":"http://paneersblog.github.io/52970.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python 位运算符(了解)位运算是把数字看作二进制数来进行计算的，所以需要先将要执行运算的数据转换为二进制，然后才能进行执行运算 “位与”运算（&amp;） 两个操作数据的二进制表示，只有对应数位都是1时，结果数位才是1，否则为0 1print(12&amp;8) # 输出结果为“8” “位或”运算(|) 两个操作数的二进制表示，只有对应数位都是0时，结果数位才是0，否则为1 1print(8|4) # 输出结果为“12” “位异或”运算（^） 两个操作数据的二进制相同（同时为0或同时为1），结果为零，否则为1 1print(31^22) # 结果为“9” “位取反”运算（~） 操作数据中对应的二进制数1修改为0，0修改为1 1print(~123) # 结果为“-124” “左移位”运算（&lt;&lt;） 将一个二进制数向左移动指定的位数，左边（高位端）溢出的位被丢弃，右边（低位端）的空位用0补充 左移位运算相当于乘以2的N次幂 12print(2&lt;&lt;2) # 将2向左移动2位 得8print(2&lt;&lt;3) # 将2向左移动3位 得16 “右移位”运算（&gt;&gt;） 将一个二进制数向右移动指定的位数，右边（低位端）溢出的位被丢弃左边（高位端）的空位端，如果最高位是O（正数）左侧空位填0，如果最高位是1（负数），左侧空位填1 右移位运算相当于除以2的N次幂 12print(8&gt;&gt;2) # 将8右移2位 得2print(-8&gt;&gt;2) # 将-8右移2位 得-2 运算符的优先级 运算符 说明 ** 幂 ~、+、- 取反、正号和负号 *、&#x2F;、%、&#x2F;&#x2F; 算术运算符 ｜ +、- 算术运算符 &lt;&lt;、&gt;&gt; 为运算符中左移和右移 &amp; 位运算符中的位与 ^ 位运算符中的异或 | 位运算符中的位或 &lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、!&#x3D;、&#x3D;&#x3D; 比较运算符 程序的描述方式自然语言：使用人类语言，直接描述程序，比如：IPO描述 流程图：是最直观易懂的表达方式，主要适用于较短的算法 伪代码：介于自然语言和编程语言之间的一种算法描述语言 程序的组织结构顺序结构：按照程序语句的自然顺序，从上到下，依次执行每条语句的程序 选择结构：按照条件选择执行不同的代码段 循环结构：在一定的条件下反复执行某段程序的流程结构 顺序结构顺序结构是程序中最基础的语句，赋值语句、输入&#x2F;输出语句、模块导入语句等都是顺序结构的语句 赋值类别 细化分类 示例 注意 增强赋值运算 增强赋值运算 i+&#x3D;1 相当于i&#x3D;i+1 序列分解赋值 元组分解赋值 name,age&#x3D;’Paneer’,20 列表分解赋值 [name,age]&#x3D;[‘Paneer’,20] 字符串分解赋值 a,b,c,d&#x3D;’room’ r、o、o、m四个字符分别赋值给a、b、c、d 扩展序列解包 *号匹配赋值 a,*b&#x3D;’room’ r赋值a，剩下的o、o、m赋值给b 常用的条件语句if语句语法结构： if 表达式: 语句块 汉语关联词：如果…就… 执行顺序：如果表达式的值为True，就执行语句块如果表达式的值为False，就跳过语句块，继续执行后面的语句 12345num = 98if n%2: print(n,&#x27;为偶数&#x27;)if not n%2: print(n,&#x27;为奇数&#x27;) if语句若语句块只有一句代码，可以将语句块直接写在冒号后面 if…else…语句语法结构为： if 表达式: 语句块1 else: 语句块2 汉语关联词：如果…否则… 执行顺序：如果表达式值为True，执行语句1，否则执行语句2 12345678number=eval(input(&#x27;请输入您的六位彩票号码&#x27;))if number=876543: print(&#x27;恭喜！中奖了&#x27;)else: print(&#x27;很遗憾，没有中奖&#x27;)# 以上代码可用条件表达式简化：number=eval(input(&#x27;请输入您的六位彩票号码&#x27;))print(&#x27;恭喜！中奖了&#x27; if number==876543 else &#x27;很遗憾，没有中奖&#x27;) if…elif…else语句语法结构： if 表达式1: 语句块1 elif 表达式2: 语句块2 ... elif 表达式n: 语句块n else: 语句块n+1 示例为： 12345678910111213score=eval(input(&#x27;请输入您的成绩：&#x27;))if score&lt;0 or score&gt;100: print(&#x27;ERROR&#x27;)elif 0&lt;=score&lt;60: print(&#x27;E&#x27;)elif 60&lt;score&lt;=70: print(&#x27;D&#x27;)elif 70&lt;score&lt;=80: print(&#x27;C&#x27;)elif 80&lt;score&lt;=90: print(&#x27;B&#x27;)else: print(&quot;A&quot;) if语句的嵌套 形式1 if 表达式1: if 表达式2: 语句块1 else: 语句块2 形式2 if 表达式1: if 表达式2: 语句块1 else: 语句块2 else: if 表达式3: 语句块3 else: 语句块4","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"Python入门笔记（四）","slug":"Python入门笔记（四）","date":"2022-02-10T16:39:06.000Z","updated":"2022-07-16T09:28:48.131Z","comments":true,"path":"3156.html","link":"","permalink":"http://paneersblog.github.io/3156.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python 数据类型之间的转换隐式类型转换通过数学运算可以隐式将 int类型 转换成 float类型。 12345# 12.数据类型隐式转换x = 10y = 3z = x/yprint(z,type(z),type(x)) # 则此时的&quot;z&quot;即为 float类型 显式类型转换 函数 说明 int(x) 将x转换为整数类型 float(x) 将x转换为浮点数类型 str(x) 将x转换为字符串 chr(x) 将整数x转换为一个字符 ord(x) 将一个字符x转换为其对应的整数值 hex(x) 将一个整数x转换为一个十六进制字符串 oct(x) 将一个整数x转换为一个八进制字符串 bin(x) 将一个整数x转换为一个二进制字符串 1234567891011121314151617181920212223# 13.数据类型显式转换# float TO int 只保留整数部分print(int(3.14))print(int(3.9))print(int(-3.14))print(int(-3.9))# int TO float 在整数后加&quot; .0&quot;print(float(10))# str TO intprint(int(&#x27;100&#x27;)+int(&#x27;200&#x27;)) # 注意，此时100与200均加了单引号，为字符串类型# str TO floatprint(float(&#x27;3.14&#x27;))# 注意，若字符串类型如&quot;10a&quot;这样，当其转换为int或float类型时会产生&quot;ValueError&quot;# 注意，类似int(&#x27;3.14&#x27;)这样的语句，因为字符串&quot;3.14&quot;不是整数，也会产生&quot;ValueError&quot;# chr &amp; ordprint(ord(&#x27;圆&#x27;)) # 22278 将&quot;圆&quot;转换成对应的数值print(chr(22278)) # 将数值转换成对应的字符# 进制之间的转换 十进制 TO Otherprint(hex(22278)) # 0x5706print(oct(22278)) # 0o53406print(bin(22278)) # 0b101011100000110 eval()函数eval(s)函数将去掉字符串s最外侧的引号，并按照Python语句方式执行去掉引号后的字符串其语法格式为： 变量=eval(字符串) eval()函数经常和input()函数一起使用，来获取用户输入的数值型 12345678910111213# eval()函数s = &#x27;3.14+2&#x27;print(s,type(s)) # 3.14+2 &lt;class &#x27;str&#x27;&gt;x = eval(s)print(x,type(x)) # 5.140000000000001 &lt;class &#x27;float&#x27;&gt;age = eval(input(&#x27;请输入您的年龄：&#x27;))print(age,type(age)) # 键入&quot;21&quot;，得&quot;21 &lt;class &#x27;int&#x27;&gt;&quot; 相当于int(age)height = eval(input(&#x27;请输入您的身高：&#x27;))print(height,type(height)) # 键入&quot;180.1&quot;，得&quot;180.1 &lt;class &#x27;float&#x27;&gt;&quot; 相当于float(height)# eval()报错情况print(eval(&#x27;hello&#x27;)) # NameError: name &#x27;hello&#x27; is not defined. 不同的进制数进制数的进位 二进制：0或1组成，满二进一，以Ob开头或0B开头 八进制：0～7组成，满八进一，以Oo或0O开头 十进制：0～9组成，满十进一 十六进制：0～9和a～f或A～F组成，满十六进一，以0x或0X开头 运算符算术运算符算术运算符是处理四则运算的符号，在数字的处理中应用的最多 运算符 说明 示例 结果 + 加 1+1 2 - 减 1-1 0 * 乘 2*3 6 &#x2F; 除 10&#x2F;2 5 &#x2F;&#x2F; 整除 10&#x2F;&#x2F;3 3 % 取余 10%3 1 ** 幂运算 2**4 16 算术运算符的优先级： 先乘除后加减 同级运算从左到右依次运算 可以使用（）调整计算优先级 第一级：** 第二级：*，&#x2F;，%，&#x2F;&#x2F; 第三级：+，- 赋值运算符主要用于为变量进行赋值直接把赋值运算符“&#x3D;”右边的值赋给左边的变量 运算符 说明 示例 展开形式 &#x3D; 简单的赋值运算 x&#x3D;y x&#x3D;y +&#x3D; 加赋值 x+&#x3D;y x&#x3D;x+y -&#x3D; 减赋值 x-&#x3D;y x&#x3D;x-y *&#x3D; 乘赋值 x*&#x3D;y x&#x3D;x*y &#x2F;&#x3D; 除赋值 x&#x2F;&#x3D;y x&#x3D;x&#x2F;y %&#x3D; 取余赋值 x%&#x3D;y x&#x3D;x%y **&#x3D; 幂赋值 x**&#x3D;y x&#x3D;x**y &#x2F;&#x2F;&#x3D; 整除赋值 x&#x2F;&#x3D;y x&#x3D;x&#x2F;y 另外， 1234567# python支持链式赋值a=b=c=100 # 相当于执行了 a=100 b=100 c=100# python支持系列解包赋值a,b=10,20 # 相当于执行了 a=10 b=20# python中交换两个变量的值b,a=a,b 比较运算符也称关系运算符，用于对变量或表达式的结果进行大小、真假等比较，如果比较结果为真，则值为True，比较结果为假，值为False 运算符 作用 举例 结果 &gt; 大于 98&gt;90 True &lt; 小于 98&lt;90 False &#x3D;&#x3D; 等于 98&#x3D;&#x3D;90 False !&#x3D; 不等于 98!&#x3D;90 True &gt;&#x3D; 大于等于 98&gt;&#x3D;98 True &lt;&#x3D; 小于等于 98&lt;&#x3D;98 True 逻辑运算符逻辑运算符是对真和假两种布尔值进行运算，运算的结果仍是个布尔值 运算符 含义 用法 结合方向 and 逻辑与 表达式1 and 表达式2 从左到右 or 逻辑或 表达式1 or 表达式2 从左到右 not 逻辑非 not 表达式 从右到左 使用逻辑运算符进行逻辑运算的结果如下 表达式1 表达式2 1 and 2 1 or 2 not 1 T T T T F T F F T F F T F T T F F F F T 注：上表T代表True，F代表False A and B中，若A为False，则不对B进行计算，直接输出False A or B中，若A为true，则不对B进行计算，直接输出Truenot 中，print(not(8&gt;7))输出结果为False","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"Python入门笔记（三）","slug":"Python入门笔记（三）","date":"2022-02-09T15:26:33.000Z","updated":"2022-07-16T09:28:48.132Z","comments":true,"path":"25237.html","link":"","permalink":"http://paneersblog.github.io/25237.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python 字符串类型转义字符反斜杠字符(\\)是一个特殊字符，在Python字符串中表示“转义”，该字符与后面相邻的一个字符共同组成一个新的含义。在字符串界定符前加上r或R，转义字符失效，将原样输出。 转义字符 说明 \\n 换行符 \\t 水平制表符，横向跳转到下一个制表位 \\&quot; 双引号 \\&#39; 单引号 \\\\ 一个反斜杠 123456# 8.转义字符print(&#x27;Paneer&#x27;)print(&#x27;真帅&#x27;)print(&#x27;-----------&#x27;)print(&#x27;Paneer\\n真帅&#x27;) # 遇到\\n即换行，可连续进行换行。print(r&#x27;Paneer\\n真帅&#x27;) # 在界定符&#x27;&#x27;前加r(R)，则原样输出 字符串的索引对字符串中某个字符的检索称作索引语法结构为： 字符串或字符串变量[序号] 注，正向递增序号从“0”开始，反向递减序号从“-1”开始 字符串的切片对字符串中某个子串或区间的检索称为切片语法结构为： 字符串或字符串变量[N:M] 切片获取字符串中从N(包含)到M(不包含)的子字符串。 123456789101112# 9.字符串的索引和切片s = &#x27;helloworld&#x27;print(s[1],s[-9]) # 输出&quot;e e&quot;，对于字符串&quot;s&quot;来讲正向第&quot;1&quot;个（从0开始）和逆向第&quot;9&quot;个都是&quot;e&quot;print(&#x27;helloworld&#x27;[9])print(&#x27;helloworld&#x27;[-1])print(s[2:7]) # 正向递增序列切片print(s[-8:-3]) # 逆向递减序列切片# N 默认是0print(s[:5])# M 默认是到字符串结尾print(s[5:]) 字符串类型的操作 操作符 描述 x+y 连接两个字符x与y x*n或n*x 复制n次字符串 x in s 若x是s的子串，则结果为true，否则为false 1234567# 10.字符串类型的操作x = &#x27;2022年&#x27;y = &#x27;北京冬奥会&#x27;print(x+y)print(10*x,x*10)print(&#x27;北京&#x27; in y)print(&#x27;上海&#x27; in y) 布尔类型 用来表示真值或假值 在Python中使用标识符True和False表示布尔类型的值 布尔类型可转换化为数值，True表示1 False表示O 所有对象都有一个布尔值，使用内置函数bool()进行测试 布尔值为假的情况 False或者是None 数值中的0，包含0，0.0，虚数0 空序列,包含空字符串、空元组、空列表、空字典 自定义对象的实例，该对象的__bool()__方法返回False或__len___()方法返回0 1234567891011121314# 11.布尔类型x = Trueprint(x) # 输出&quot;True&quot;print(type(x)) # 输出&quot;&lt;class &#x27;bool&#x27;&gt;&quot;print(True+10) # 1+10print(False+10) # 0+10# 测试对象的布尔值print(bool(18)) # Trueprint(bool(0),bool(0.0)) # Falseprint(bool(&#x27;北京欢迎你&#x27;)) # Trueprint(bool(&#x27;&#x27;)) # 空字符串，Falseprint(bool(False)) # Falseprint(bool(None)) # False","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"test page (music)","slug":"test","date":"2022-02-09T09:57:12.000Z","updated":"2022-07-19T04:43:13.511Z","comments":true,"path":"1.html","link":"","permalink":"http://paneersblog.github.io/1.html","excerpt":"音乐播放器测试(进来听歌)","text":"音乐播放器测试(进来听歌) Embed aplayer in Hexo posts&#x2F;pages. GitHub 项目地址，感谢作者。 插件功能很强大，这里主要介绍如何使用其中一个功能MeingJS，想了解更多功能可以去看官方文档。 MeingJS支持从网易云音乐等平台获取 id（歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字）后配合代码模板，即可在页面显示。 安装npm install --save hexo-tag-aplayer 若无法正常显示播放器，则可能是下列 js 版本过低 APlayer.js &gt; 1.8.0 Meting.js &gt; 1.1.1 使用 配置hexo配置文件_config.yml，添加如下（在文件最后直接粘贴即可）： 123aplayer: meting: true# 注意，冒号后要加一个空格 获取歌词、歌单ID。 没什么多说的，教程很多。注，此测试页用的id为 445546453 在markdown文件中添加如下代码模版即可： &#123;% meting \"获取的id\" \"netease\" \"song\" \"mini:ture\" \"volume:0.5\" \"theme:#49A6F9\" %&#125; 注意，该代码模版可能不会在markdown渲染器中渲染出来(类似插入图片，详细参考Markdown速查表)4. hexo clean &amp; hexo g &amp; hexo d 三连即可看到！ 标签参数 下表中的音乐平台分别代表：网易云、QQ音乐、酷狗、百度可按照此表在代码模板中修改 选项 默认值 描述 id 必须值 歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字 server 必须值 音乐平台: netease, tencent,kugou,baidu type 必须值 song, playlist, album, search, artist fixed false 开启固定模式 mini false 开启迷你模式 loop all 列表循环模式：all, one,none order list 列表播放模式： list, random volume 0.7 播放器音量 lrctype 0 歌词格式类型 参考链接：XJHui’sBlog","categories":[{"name":"测试页","slug":"测试页","permalink":"http://paneersblog.github.io/categories/%E6%B5%8B%E8%AF%95%E9%A1%B5/"}],"tags":[]},{"title":"Python入门笔记（二）","slug":"Python入门笔记（二）","date":"2022-02-07T15:31:37.000Z","updated":"2022-07-16T09:28:48.139Z","comments":true,"path":"28396.html","link":"","permalink":"http://paneersblog.github.io/28396.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python Python中的注释什么是注释？ 是指程序员在代码中对代码功能解释说明的文字，可以提高代码的可读性 注释的内容将被Python解释器忽略，不被计算机执行 注释的分类？ 单行注释 以“#”作为单行注释的符号，作用范围从“#”开始直到换行为止 多行注释 Python中并没有单独的多行注释标记，将包含在一对三引号[‘’’…’’’]OR[“””…”””]之间的代码称为多行注释 中文注释声明 # coding:utf-8 或 #coding&#x3D;utf-8 或 #-*-coding:utf-8-*- 12345678910111213141516171819202122232425# 10.单行注释# 要求从键盘去输入出生年份，举例：1998year = input(&#x27;请输入您的出生年份：&#x27;)year = input(&#x27;请输入您的出生年份：&#x27;) # 要求从键盘去输入出生年份，举例：1998# 11.多行注释&#x27;&#x27;&#x27;参考视频：马士兵教育分节名：11.多行注释创建人：Paneer&#x27;&#x27;&#x27;# -*- OR -*- #&quot;&quot;&quot;参考视频：马士兵教育分节名：11.多行注释创建人：Paneer&quot;&quot;&quot;# 12.中文声明注释# 在Python2.x中，使用中文注释时必须要加上中文声明注释。在Python3.x中可加可不加。# coding:utf-8# 此声明若加的话务必加在代码首行。# 写好注释至关重要哦~ 代码缩进Python语言采用严格的“缩进”来表示程序逻辑 缩进是指每行语句开始前的空白区域，用来表示Python程序间的包含和层次关系 一般代码不需要缩进，顶行编写且不留空白 类定义、函数定义、流程控制语句，以及异常处理语句等，行尾的冒号和下一行的缩进表示一个代码块的开始，而缩进结束则表示一个代码块的结束 缩进可以使用空格或Tab键来实现，通常情况下采用四个空格作为一个缩进量 12345678910# 13.代码缩进print(&#x27;hello&#x27;) print(&#x27;hello&#x27;) #此情况下会报错：IndentationError: unexpected indent,解决办法是删掉第二个print前的空格 # 类的定义class Student: pass# 函数定义def fun(): pass 在Python交互式模式中运行*.py文件首先确保电脑已经安装好python且配置好了环境变量，其语法格式为： 1python 完整文件名（包括路径） 数据类型和基本运算符保留字与标识符保留字：保留字是Python已经被赋予特定意义的一些单词，在开发程序时，不可以把这些保留字作为变量、函数、类、模块和其他对象的名称来使用保留字表如下所示： and as assert break class continue def del elif else except finally for from False global if import in is lambda nonlocal not None or pass raise return try True while with yield 注：保留字严格区分大小写，只有True、False、None为首字母大写。 保留字查看 123# 保留字的查看import keywordprint(keyword.kwlist) 标识符：标识符可以简单的理解为是一个名字，它主要用来标识变量、函数、类、模块和其他对象的名称。 Python标识符的命名规则： 可以是字母、下划线“_”和数字，并且第一个字符不能是数字 不能使用Python中的保留字 标识符严格区分大小写 以下划线开头的标识符有特殊意义，一般应避免使用相似的标识符 允许使用中文作为标识符，但不建议 标识符的命名规范： 模块名尽量短小，并且尽量全部使用小写字母，可以使用下划线分隔多个字母。如 grame_main 包名尽量短小，并且尽量全部使用小写字母，不推荐使用下划线。如 com.paneer,不推荐com_paneer 类名采用单词首字母大写形式(Pascal风格)。如 MyClass 模块内部的类采用“_”+Pascal风格的类名组成。如在MyClass中的内部类 _InnerMyClass 函数、类的属性和方法的命名，全部使用小写字母，多个字母之间使用下划线分隔 常量命名时采用全部大写字母，可以使用下划线 使用单下划线“_”开头的模块变量或函数是受保护的，在使用from xxx import *语句从模块中导入时，这些模块变量或函数是不能被导入的 使用双下划线“__“开头的实例变量或方法是类私有的 以双下划线开头和结尾的是Python的专用标识。如 __init__() 表示初始化函数 1234567891011121314151617181920# 2.标识符的规范&#x27;&#x27;&#x27;每一个*.py文件都是一个模块，模块命名应尽量使用小写字母并使用下划线分隔这些*.py文件所在的文件夹称作包，包命名应尽量使用小写字母不推荐使用下划线&#x27;&#x27;&#x27;class MyClass: # 新建一个名为MyClass的类，采用Pascal风格 class _InnerMyClass: # 新建一个名为 _InnerMyClass 的内部类 pass# 函数 fun &amp; fun_name 的定义def fun(): passdef fun_name(): pass Python中的变量变量是指保存和表示数值的一种语法元素，可以简单的理解为“名字”。变量的值是可以改变的，可以通过赋值方式被修改。 例如，word=&#39;Paneer真帅&#39;即是将“Paneer真帅”赋值给了变量“word” 可以理解为去菜鸟驿站取快递，我只需要取件码就能找到自己的快递，此时我的取件码就是一个变量，它代表的那个位置上的快递是我的，因为是菜鸟驿站的工作人员给它赋值了。 变量的定义其语法结构为： 变量名=value 变量的使用Python是一种动态类型的语言，变量的类型可以随时变化 使用内置函数type()可以查看变量的数据类型 Python中允许多个变量指向同一个值 使用内置函数id()可以返回变量所指的内存地址 123456789101112131415# 3.变量的定义和使用luck_number=8 # 创建一个整型变量luck_number，赋值为8my_name=&#x27;Paneer&#x27; # 创建一个字符串类型变量print(my_name,&#x27;的幸运数字是：&#x27;,luck_number)print(&#x27;luck_number的数据类型是：&#x27;,type(luck_number))# 变量的值可以更改luck_number=&#x27;Emily真圆&#x27;print(&#x27;luck_number的数据类型是：&#x27;,type(luck_number)) # 此时其数据类型就是 str型（字符串型）了# Python允许多个变量指向同一个值no=number=502 # 给no 和number 都赋值为502print(no,number)print(id(no)) # 输出no 所指向的内存地址print(id(number)) #输出number 所指向的内存地址，会发现与no 的相同 变量命名应遵循以下几条规则 变量名必须是一个有效的标识符 变量名不能使用Python中的保留字 慎用小写字母l和大写字母O 应选择有意义的单词作为变量名 同样的，常量也应遵循以下规则 常量就是在程序运行过程中值不能改变的量。如PI Python中没有定义常量的保留字 常量规定使用大写字母和下划线组成 常量首次赋值之后，还是可以被其他代码修改的 基本数据类型数值类型整数类型特点 表示整数数值，即没有小数部分的数值 正整数、负数和0 理论取值范围为（负无穷，正无穷） 整数的表示类型 不可变的数据类型 进制种类 引导符号 概述 十进制 无 默认情况，如 365，257 二进制 0b或0B 由0，1组成，如 0b101，0B1010 八进制 0o或0O 由0-7组成，如 0o367，0O666 十六进制 0x或0X 由0-9，a(A)-f(F)组成，如 0x98A，0X89F 123456789# 4.整数类型num=987 # 默认十进制num1=0b10100101 # 使用二进制表示整数num2=0o765 # 使用八进制表示整数num3=0x98AF # 使用十六进制表示整数print(num) # 输出全部为十进制print(num1) # 输出全部为十进制print(num2) # 输出全部为十进制print(num3) # 输出全部为十进制 浮点数类型 表示带有小数点的数 浮点数由整数部分和小数部分组成 Python中浮点数类型必须要有小数部分，小数部分可以是0 浮点数可以使用科学计数法表示 两个浮点数相加，有一定概率运算结果后增加一些“不确定的”尾数 使用内置函数round()可以限定运算结果需要保留的小数位数 不可变数据类型 12345678910# 5.浮点数类型height=180.1print(type(height)) # 可以得出height 的数据类型为float 型x=10y=10.0print(type(x)) # x为int 型print(type(y)) # y为float 型# 浮点数相加尾数不确定问题print(0.1+0.2) # 得结果为 0.30000000000000004，有一不确定尾数print(round(0.1+0.2,1)) # 保留一位小数 复数类型 Python中复数与数学中的复数形式完全一致 复数由实部和虚部组成 j是复数的一个基本单位，被定义为 j&#x3D;$\\sqrt{-1}$ ，又称虚数单位 .real获取实数部分，.imag获取虚数部分 不可变数据类型 12345# 6.复数类型z=123+456j # 定义复数类型 complex型print(type(z))print(&#x27;实数部分：&#x27;,z.real) # 输出实数部分print(&#x27;虚数部分：&#x27;,z.imag) # 输出虚数部分 字符串类型 字符串就是连续的字符序列，，可以表示计算机所能识别的一切字符 不可变数据类型，，即不可变字符序列 单行字符串使用’…’或”…” 多行字符串使用’’’…’’’或”””…””” 12345678910111213# 7.字符串类型# 单行字符串city=&#x27;菏泽&#x27;address=&quot;山东省菏泽市&quot;print(city)print(address)# 多行字符串info=&#x27;&#x27;&#x27;地址：山东省菏泽市收件人：Paneer&#x27;&#x27;&#x27;print(info)","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"专业词汇表（一）","slug":"WordList-蛋白质的结构与功能","date":"2022-02-06T15:34:20.000Z","updated":"2022-07-16T09:31:02.566Z","comments":true,"path":"25723.html","link":"","permalink":"http://paneersblog.github.io/25723.html","excerpt":"第一章 蛋白质的结构与功能","text":"第一章 蛋白质的结构与功能 protein 蛋白质 amino acid 氨基酸 isoelectric point, pI 等电点 peptide bond 肽键 peptide 肽 peptide unit 肽单元 oligopeptide 寡肽 polypeptide 多肽 neuropeptide 神经肽 residue 氨基酸残基 amino terminal N端 carboxyl terminal C端 glutathione，GSH 谷胱甘肽 conformation 高级结构、空间构象 primary structure 一级结构 secondary structure 二级结构 α-helix 螺旋 β-sheet 折叠 β-turn 转角 random coil 无规则卷曲 super-secondary 超二级结构 structure&#x2F; motif 模体 tertiary structure 三级结构 domain 结构域 chaperon 分子伴侣 quaternary structure 四级结构 subunit 亚基 sickle cell anemia 镰刀型细胞贫血 myoglobin, Mb 肌红蛋白 hemoglobin, Hb 血红蛋白 cooperativity effect 协同效应 positive cooperativity 正协同效应 negative cooperativity 负协同效应 tense state 紧张态, T态 relaxed state 松弛态 ，R态 allosteric effect 别构效应 allosteric effector 别构效应剂 allosteric protein 别构蛋白 protein conformational disease 分子构象病 prion protein， PrP 朊病毒 denaturation 变性 renaturation 复性 protein coagulation 凝固作用 biuret reaction 双缩脲反应 dialysis 透析 electrophoresis 电泳 SDS-PAGE SDS-聚丙烯酰胺凝胶电泳 SDS 十二烷基磺酸钠 salt precipitation 盐析 chromatography 层析 gel filtration 凝胶过滤 ultracentrifugation 超速离心法","categories":[{"name":"英语学习","slug":"英语学习","permalink":"http://paneersblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"WordList_E","slug":"WordList-E","permalink":"http://paneersblog.github.io/tags/WordList-E/"}]},{"title":"SRIM入门（一）","slug":"SRIM入门（一）","date":"2022-02-06T15:10:12.000Z","updated":"2022-07-16T09:31:18.794Z","comments":true,"path":"11784.html","link":"","permalink":"http://paneersblog.github.io/11784.html","excerpt":"我的SRIM入门","text":"我的SRIM入门 写在前面的废话博主的毕业设计需要用到SRIM软件来模拟某种材料在经历某种辐照下的损伤情况，故学习该软件并整理得此笔记。 博主在《核测量仪器》一门课中已经对TRIM有了一定程度了解(感谢许老师给予的帮助)，虽仍有较多不懂之处，但也相当于有一定的基础。为了系统的去整理，博主会尽量的以一个零基础学者来进行整理记录，但过于简单之处将会略去。 一些基础知识SRIM程序可以模拟离子辐照靶材料的过程，计算出离子在靶材料内造成的辐照损伤程度，用 dpa (displacements per atom)指标来确定，即在给定注量下每个原子平均的离位次数。SRIM程序基于蒙特卡罗方法，计算相对简单，在使用离子束辐照材料的实验中，大多数通过 SRIM 程序的模拟数据来得到 dpa 的值。 另外，由于中子辐照试验操作复杂、时间漫长、费用昂贵，因此在实验中普遍利用离子辐照代替中子辐照。 SRIM程序常用的计算模式主要有两种： “Ion Distribution and Quick Calculation of Damage”简称 K-P 模式，模拟过程中追踪入射离子及初级离位原子，只考虑入射离子和初级离位原子在靶材料中的碰撞过程； “Detailed Calculation with full Damage Cascade”简称 Full Cascade 模式，模拟过程中追踪入射离子、初级离位原子和所有的次级离位原子，考虑了入射离子和各级离位原子的碰撞，计算级联碰撞在靶材料中造成的全部损伤。 从两种模式的运行方式来看，应该是 Full Cascade 模式获得的 dpa 值更接近真实情况。然而在利用离子来模拟反应堆中子辐照的实验中，比较离子和中子辐照数据，K-P 模式获得的结果与中子实验和模拟结果更接近，Full Cas-cade 模式获得的数据偏差较大。若要利用离子来模拟中子辐照，以前的离子辐照实验大多是使用 Full Cascade 模式进行运算的，因此需要计算 K-P 模式下的模拟结果，与 Full Cas-cade 模式下的计算结果进行比较。 接下来，博主通过两个demo来详细介绍 SRIM demo1 离子在固体中的射程、剂量及辐照损伤简述学习目标：掌握如何确定离子的能量和剂量，使其注入靶后能达到我们所要求的浓度和深度，从而能够回答将任意粒子注入到任意靶材料情况下的问题。 demo条件：我们以在CMOS半导体器件中注入n型井为例。 注入硅中的离子（即注入原子）应为n型元素，并在表面以下约250nm（2500Ang）深处达到浓度峰值（以投影射程计）。掺杂原子的浓度为每平方厘米5E18个离子。 看起来很复杂？其实就是磷（P）或砷（As）或锑（Sb）元素的离子被直接注入到样品的一定深度并形成一定的浓度。 另外，还有一个附加条件，我们假定注入离子的能量不超过200keV（实际中加速器加速的粒子能量不超过该值）。 注意，TRIM 中很多情况下使用的单位是Ang（埃），因为其大约是固体中单层原子的厚度，这常用于估计靶的围观损伤， 我们将问题整理如下： 注入元素是？ 需要注入的剂量(ions&#x2F;cm2)？ 靶在注入后是否会产生非晶化？ 确定入射粒子的种类与能量 打开 SRIM-2013 软件 点击 Stopping and Range Tables (S&amp;R Tables) 首先输入离子。开始可以点击“ION”旁的帮助按钮即“？”。 为了在 Si 中注入一个n型井，我们要从元素周期表第五列元素中选择一种元素来作为杂质元素注入。我们选择 As 来开始。点击窗口中“Ion”旁的“PT”键来打开元素周期表并选择 As 来作为入射粒子。 此时程序将会自动填充描述输入离子性质的各种选项。注意此时使用的离子质量并不是 As 的平均原子质量，而是丰度最大的同位素(MAI)的质量。 在窗口中向下来到“Target”按钮，旁边有帮助按钮“？”。 利用“PT”按钮选择“Si”，选定靶的成分为硅。注意到靶原子质量不再是 MAI ，而是元素的平均值然质量。 剩下描述靶的表格是空白的，也是非必需的，选项“Stoich”则是用于计算混合物靶时指定其中每种元素的化学计量。举例，若靶中有 Si 和 Ge 且其“Stoich“中数字均为1，则证明其元素比为1:1，各占百分之五十。 另外，最后的“gas“处，若靶为气态则应打勾，反之不然。 点击 ”Calculate Table“ 按钮进行计算。 计算结果会储存在：”SRIM Outputs\\Arsenic in Silicon“中，如果你需要再次查询它的话，其文件路径为： …&#x2F;SRIM Outputs&#x2F; 接下来我们观察输出文件: Ion Energy dE&#x2F;dx Elec. dE&#x2F;dx Nuclear Projected Range Longitudinal Straggling Lateral Straggling 10 keV 2.75E-01 4.06E+00 124 A 47 A 35 A 11 keV 2.89E-01 4.16E+00 131 A 49 A 37 A … … … … … … 375 keV 1.94E+00 4.05E+00 2404 A 590 A 462 A 400 keV 2.01E+00 3.96E+00 2566 A 622 A 489 A 2500A的投影射程对应入射离子能量将近400keV。故我们可以得出如下结论： 这是一个高于200keV的离子注入机所能达到的能量！ 我们应使用 P 离子入射，重新计算这个射程表格。 计算磷离子的射程表格为： Ion Energy dE&#x2F;dx Elec. dE&#x2F;dx Nuclear Projected Range Longitudinal Straggling Lateral Straggling 10 keV 3.90E-01 1.87E+00 169 A 83 A 60 A … … … … … … 180 keV 1.83E+00 1.11E+00 2359 A 709 A 565 A 200 keV 1.91E+00 1.05E+00 2612 A 761 A 615 A 观察可得，我们可以注入190 keV的磷离子来产生一个浓度峰在2500A的n型井（由内插法可得） 继续我们的步骤，在离开Stopping and Range 窗口前，可以点击“？”来参考其他帮助信息。 190keV 的磷离子产生的损伤 在主菜单上 TRIM Calculation 按钮旁有一个帮助按钮“？”，点击它可以阅读该程序的教程。 TRIM（Transport of Ions in Matter）是一个非常复杂的程序。它不仅可以描述离子在物质中的射程，还可以详细计算注入离子在慢化过程中对靶产生损伤等其他信息。它可以使用动画让你看到离子注入到靶中的全过程，并给你展示级联反冲粒子和靶原子混合在一起的情形。为了精确估计每个离子和靶原子间相遇时的物理情形，程序只能一次对一个粒子进行计算。这样的话，计算可能消耗可观的时间计算每个离子花费的时间从一秒到几分钟不等。而精确度由模拟采用的离子数来决定。典型的情况是，应用 1000个离子进行计算将得到好于10%的精确度。 点击 TRIM Calculation 按钮 在TRIM窗口中，ION DATA(离子数据)板块点击“PT“按钮，选择磷元素，此时离子的其他参数会被自动填入。 设置ION DATA中”Energy(keV)“窗口值为190.即上一部分时我们得到的能量值。 继续设置TARGET DATA(靶数据)，此处最多可设置为20层由混合物构成的靶，但在此demo中我们只使用简单的单质硅基体。 找到靶的“PT”按钮，选择“Si” 在设置靶层数等左下板块，找到“Width”输入框，输入3500 Ang，设置靶的厚度。因为我们所关心的是2500埃处的情况，对于大于2500埃的地方发生什么并不关心，故此厚度足够。 在TARGET DATA输入板块左边的“LayerName”输入框，输入Si(用以代替默认命名)。 接下来我们将考虑需要进行计算的类型。TRIM既可以进行一些概略计算，如阻止本领和射程（SR）的计算，其执行时间通常不超过一秒，也可以进行一些复杂计算，如离子和靶之间每次相互作用的详细计算，在这种计算中，模拟每 100 个离子可能需要花费几个小时。计算类型可使用“Type of TRIM Calculation”（TRIM 计算类型）下面的两个下拉菜单来设置。 注意右上角的选项框“DAMAGE”。在它右边是帮助选项框“？” 注意，该帮助至关重要。点击它来阅读关于可以进行的损伤计算的类型。尽管它看起来非常复杂，但是在下面的实践中你将学会使用它们进行各种特殊情形的计算。 下拉DAMAGE 菜单选择“Detailed Calculation with Full Damage Cascades”(详细的计算完全损伤级联)。 在这个选项框下面是可供选择的基本图像绘制模式。现在我们可以忽视这个选项。我们将会做出各种图像，但我们将在计算按照需要改变它们。 最后，在窗口中部的最右边接近“Damage（eV）”选项框的边上有另一个帮助选项框。我们可以查看它以了解产生各种特定种类的损伤所需要的不同能量。在深入之前，我们应该了解这些概念:移位能(Displacement energy）、表面结合能（Surface binding energy）和晶格结合能（Lattice binding energy）。 设置完成，一定要多看看帮助按钮，这个软件的帮助按钮写的十分详细。 最后，点击“Save Input and Run TRIM”开始计算。 损伤的TRIM计算结果TRIM 计算开始。当 TRIM生成描述你的靶的内部表格需要一段时间(其实很快)。之后你将看到第一个离子的径迹。在离子每产生一个空位（即将一个硅原子撞离它在晶格上的格点位置），离子径迹都会用一个红点来表示，而绿点是由反冲的硅原子产生的空位。 可以注意到离子总是会造成损伤（红点），而在反冲硅原子产生所谓的反冲级联损伤的位置会有成群的绿色小点。 每次磷离子猛烈地撞击到个硅原子上，它将转移相当一部分能量给硅原子。由于磷原子和硅原子具有几乎相等的质量，我们可以知道这是正确的。如果离子和靶原子的质量相差很大，那么转移给靶原子的能量就会非常小。这是两个粒子间弹性碰撞的基本物理现象。每次离子和硅之间发生猛烈的碰撞，并产生一条绿色的级联损伤线，离子有很大可能会改变运动方向。由于此时我们只能看到两个坐标轴定义的区间之上的图像，一些三维空间偏转的情况是不可见的。 几乎每次离子和一个靶原子碰撞，就会有一个空位（一个红点）产生。靶原子随后反冲回来，并且它所有产生空位的碰撞都用绿色小点在图中标出。单个反冲原子最多可以产生 1000 个空位（绿色），而离子只产生一个空位（红色）。 TRIM Calculation Window（计算窗口)左边的“DISTRIBUTIONS”（分布）的表格中有各种按钮。左边的第一列按钮“？”是每种图像的帮助菜单。第二列“File”按钮在硬盘上生成文档,请勿点击它们。第三列（白色方形框）是用于选取图像。我们将在进行下面的入射选项时用到这些命令。当你点击任意一个按钮后，在对正在进行的离子入射计算完成前有一个停顿，之后命令才会被执行。因而你需要耐心等待。当你查看任意图像时计算会继续进行，并且这些图像会在每个离子入射后被更新。 最顶端的图像是ION DISTRIBUTION（离子分布）。阅读帮助选项，并熟悉它们(真的很有必要)。现在点击这个选项中的作图选项。一个标题为ION RANGES（离子射程）的图像就会产生。你将会看到磷离子（190keV）在硅靶中的分布。这个“离子射程”大约为 2400-2500A。我们设置了靶厚度大约为 3500A，使得我们在此图像中能够获取大部分的离子。注意坐标单位：“（Atom&#x2F;cm3）&#x2F;(Atoms&#x2F;cm3)”。尽管这些单位看起来很奇怪，当你乘以一个注入剂量（ions&#x2F;cm2）时，你将会最终得到杂质分布（atoms&#x2F;cm3）对深度的曲线。这是非常好的！假设你想要一个约为每平方厘米5×1018的掺杂峰浓度，试想如果你可以判定这一参量的话，每平方厘米 1014个磷原子的注入剂量就足够了。这对于n型井的掺杂将是完美的。 如果你想要一个约为每平方厘米5×1018的掺杂峰浓度，那需要多大的磷离子注入剂量呢？ 注意到这个分布的更高级的参数(straggle 歧离度、skewness 偏斜度、kurtosis 峰度)在图像上面给出。这些都在图像的帮助菜单中简略地进行了讨论。要得到更详细的说明，点击顶部的“Help，FAQ and Scientific Explanations”键，选择“TRIM FAQand Solutions”，然后选择“Statistics of Range Distributions”。阅读它可以理解这些选项使用的不同的统计办法以描述最后的离子分布。另外，关闭射程图窗口（每个打开的图像窗口都会减慢计算速度）。 接下来我们要来关注 Ion&#x2F;Recoil Distribution。点击帮助选项键来获得其内容。 选择Ion&#x2F;Recoil Distribution图像。注意“Ion”图（红色）和在IonDistribution中展示的图是相同的。绿色的图展示的是反冲硅原子的分布。这些都是被撞击出它们晶格位置产生空位的硅原子。注意到反冲硅原子（绿色）的分布相比磷离子有一个更浅的峰。在磷离子径迹的末端附近，离子不具备足够的能量来产生大量的级联损伤。这两个峰具有相同的大小，因而他们对靶造成的损伤几乎等同。 这个图像的单位也是“（Atom&#x2F;cm3）(Atoms&#x2F;cm2)”在反冲硅原子分布的峰附近数值为108。硅原子的密度大约是5×1022atoms&#x2F;cm2。稍作计算，我们可以得出，在每平方厘米5×1014个磷原子的剂量下，在损伤分布峰处平均每个靶原子就会发生一次移位。这表明晶体靶会非晶化，除非在室温下99%的硅晶体损伤会立刻退火导致大部分的损伤会消失。这将在以后进行更详尽的论述。另一张图会帮助你理解这些碰撞的细节。这张名为“Collision Events”的图将会把靶空位数作为深度的函数画出（这张图可通过在 TRIM 计算窗口中点击 Damage Events然后选择Total Vacancies 来生成）。注意在峰位也是大约每个A量级的离子产生一个空位，这和之前反冲分布的数字（108A&#x3D;1cm）不谋而合。 磷离子是否会产生一个非晶化层我们可以估算磷离子是否能产生一个非晶化层。在上面得到的损伤图的峰位处的空位率大约为1空位&#x2F;靶原子。但是我们假设99%的损伤都能立刻退火，只剩下1%的损伤。利用前面计算得到的图像和1015ions&#x2F;cm2的注入剂量可以得到在每A·cm2的体积中可以生成1013个稳定的空位。利用108A&#x3D;1cm进行代换，得到空位密度为1021&#x2F;cm3。硅的密度是5×1022&#x2F;cm3。计算得到的损伤密度是立方厘米 1021个空位。因此硅靶的损伤程度大约为 2%，因而注入层并不是非晶化的。这个结论并不是非常准确，因为硅的移位能（将在以后讨论）在损伤累积时会减小。这意味着只要有局部的损伤，由于晶格之间耦合得更松散，原子更容易离位，而更多的损伤也更容易生成。这些在晶体中整体性的的变化在TRIM中并未被考虑，因而损伤可能被低估了。 2022.2.6 23:00更新预告：demo2 靶的混合和溅射 Ps：文章内容主要来自外文翻译，由于博主英文水平有限，难免出现语法错误等，欢迎大家评论区指正。另，由于上传博客时markdown语法插入的图片会失效，故暂不进行插图，日后闲出屁了再考虑完善吧。","categories":[{"name":"软件学习","slug":"软件学习","permalink":"http://paneersblog.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"SRIM","slug":"SRIM","permalink":"http://paneersblog.github.io/tags/SRIM/"}]},{"title":"洛阳一日游","slug":"洛阳一日游","date":"2022-02-05T13:07:52.000Z","updated":"2022-07-16T09:32:41.339Z","comments":true,"path":"12309.html","link":"","permalink":"http://paneersblog.github.io/12309.html","excerpt":"洛阳一日游简单攻略","text":"洛阳一日游简单攻略 龙门石窟建议时长：3-4小时门票价格：100元，包括西山石窟、东山石窟、香山寺、白园等 龙门石窟是印度文化与中国文化相融合的建筑。石窟分为西山和东山两部分，东山石窟多是唐代作品，而西山石窟开凿于北朝、隋唐时期。 洛阳博物馆建议时长：1-2小时门票价格：免费 从龙门石窟回市区的路上，可以游览洛阳博物馆。洛阳是一座综合性历史博物馆，由主楼和辅楼组成。主楼一层为通展，二楼则是博物馆的精品展。新馆共展出文物1.1万余件。 白马寺建议时长：1-2小时门票价格：35元（不包含解说） 从博物馆乘77路可前往白马寺。白马寺是佛教传入中国后第一所官办寺院。其分为三个部分，白马寺古寺，东面的齐云塔院以及西面的外国佛寺。白马寺建筑规模宏伟，现布局为明嘉靖时重修，仅存天王殿、大佛殿、大雄殿、接引殿四座大殿，其中大雄宝殿是全寺主殿。 洛阳老街建议时长：不限门票价格：无 从白马寺回到市区，到洛阳老街。洛阳老街承载着洛阳的记忆，老街西起丽景门，东至鼓楼，中心部分为十字街。老街更多的保持了原始风貌，青石板路，砖房店面。老街中有很多当地的美食。 数据参考：马蜂窝-洛阳一日游","categories":[{"name":"攻略","slug":"攻略","permalink":"http://paneersblog.github.io/categories/%E6%94%BB%E7%95%A5/"}],"tags":[{"name":"Trip","slug":"Trip","permalink":"http://paneersblog.github.io/tags/Trip/"}]},{"title":"郑州-准备知识","slug":"郑州","date":"2022-02-04T15:08:50.000Z","updated":"2022-07-16T09:32:44.885Z","comments":true,"path":"16655.html","link":"","permalink":"http://paneersblog.github.io/16655.html","excerpt":"About 郑州","text":"About 郑州 郑州景点Top5嵩山五岳之一，这里道、佛、儒三教荟萃，是三教合一体现最为完美的地方这里还包含景点：中岳庙 三皇寨 卢崖瀑布风景区 二祖庵 达摩洞 嵩阳书院 药师阁 观音阁 孝贤碑林 大法王寺 六祖坛 少林寺演武厅(入口) 初祖庵(山门) 地质公园标志碑 石英岩脉(嵩山龙鸟) 乾隆御碑 清心潭 落印潭 十方禅院 少林寺站 少林古兵器展览馆 emm不想爬山的话不考虑 门票少林寺景区:80人民币；嵩山(太室山):50人民币；中岳庙:30人民币 (1月1日-12月31日 周一-周日) 开放时间07:00-18:30(太室山、少林寺、永泰寺、卢崖瀑布、会善寺)08:00-17:00(中岳庙、嵩阳书院) (1月1日-12月31日 周一-周日) 河南博物馆中国建立较早的博物馆之一，功能齐全，展品丰富，是一个科普知识的好去处。每周二至日，博物馆内会有华夏古乐演出，演出时间分别是11:00和16:00点，每场演出约20分钟。 门票免费开放时间09:00-17:30(夏令时)09:00-17:00(冬令时) 建业·华谊兄弟电影小镇建业·华谊兄弟电影小镇是建业集团新蓝海战略的文化力作，坐落于郑州国际文化创意产业园，地处郑汴洛黄金旅游带中心位置，辐射中原城市群核心高地。电影小镇从本土文化出发，从沉浸式电影场景出发，以电影主题演艺为核心，打造集电影互动游乐、电影文化体验、电影主题客栈、民俗和非遗体验等于一体的沉浸式电影潮玩地。 门票全价票:100人民币；优惠票:70人民币 (1月1日-12月31日 周一-周日) 开放时间10:00-22:00；停止入场时间:21:00 (1月1日-12月31日 周一-周日) 优惠票需要学生证+身份证原件距离戏剧幻城2.6公里 只有河南·戏剧幻城有河南·戏剧幻城是由建业集团携手王潮歌导演共同打造的一座有21个剧场的戏剧幻城，也是中国最大的戏剧聚落群。景区以沉浸式戏剧艺术为手法，以独特的“幻城”建筑为载体，通过讲述关于“土地、粮食、传承”的故事，让更多人感受戏剧文化的魅力。 门票一日票：全价290元，优惠200元开放时间10:00-20:00 (1月1日-12月31日 周一-周五)10:00-22:00 (1月1日-12月31日 周六-周日) 始祖山风景区免费会爬山+1 其他景点二七纪念塔CBD玉米楼两座地标性建筑，不想写了。。。 郑州美食烩面郑州最具有代表性的美食，特点是汤好面筋，营养高，按配料不通过可以分为：牛&#x2F;羊肉烩面、三鲜烩面等。 热门店：萧记三鲜烩面、合记烩面、四厂烩面、西三烩面、裕丰源滋补烩面、惠丰源烩面馆。 烩羊肉登封风味小吃，肉味鲜美，肥而不腻。 热门店：三厂老胡家烩羊肉、刘记羊肉汤、虢国羊肉汤馆、宋老三苏肉羊肉汤 胡辣汤对于郑州人来说，早晨唤醒灵魂的一定是胡辣汤的香味。 热门店：方中山胡辣汤(顺河路店)、逍遥镇胡辣汤、高老大牛排胡辣汤(嵩山南路249-36)、杨凤花胡辣汤(玉凤路333号) 其他美食焖饼、油馍头、炸酥肉等较为普遍，不赘述。 美食街区&amp;夜市二七广场(六道巷)、德化街、紫荆山、伏牛路、伊河路、顺城街、永安街、布厂街、公园茂、农科路夜市 信息因疫情可能有较大误差，仅供参考 交通 机场：新郑国际机场地铁2号线沿线城郊线直达。 火车站：郑州站、郑州东站(高铁经停)、郑州西站等 地铁站：目前已开通地铁1&#x2F;2&#x2F;5&#x2F;14&#x2F;城郊线五条地铁线路，可领取电子卡刷码乘车。 公交：郑州公交价格在1元左右，运营时间约在6-23点之间，可刷码乘车。 打车起步价8元。 住宿住宿主要根据自己想去的地方选择。 如果喜欢热闹&#x2F;爱逛街&#x2F;品尝小吃，可以选择二七广场&#x2F;国贸360&#x2F;中原万达附近，交通便利，美食集中。 如果比较喜欢自然风景，可以考虑住郑州东站(高铁站)附近，离会展中心&#x2F;绿博园&#x2F;大学城都不远，也有到登封少林寺&#x2F;开封市的车。 2022.02.04 更新分割线 更新预告： 将景点在地图中标注出，讨论确定要去的景点+备用景点。 将景点周围价格合适的酒店、民宿等整理出一个list。 大概计算得出预算区间。 数据参考：[1].马蜂窝-郑州景点概况[2].知乎-超强郑州旅游攻略","categories":[{"name":"攻略","slug":"攻略","permalink":"http://paneersblog.github.io/categories/%E6%94%BB%E7%95%A5/"}],"tags":[{"name":"Trip","slug":"Trip","permalink":"http://paneersblog.github.io/tags/Trip/"}]},{"title":"Python入门笔记（一）","slug":"Python入门笔记(一)","date":"2022-02-02T15:15:00.000Z","updated":"2022-07-16T09:31:37.114Z","comments":true,"path":"65174.html","link":"","permalink":"http://paneersblog.github.io/65174.html","excerpt":"人生苦短 我用Python","text":"人生苦短 我用Python By Paneer Python具有强制可读性，通过强制缩进来体现语句之间的逻辑关系 Python中基本的输入输出统一的运算模式：输入数据、处理数据、输出数据I-P-O Input,Process,Output 基本输出函数 print()print()函数简单语法结构为： 1print(输出内容) print()函数简单输出 输出内容可以是数字和字符串（字符串要用引号括起来），此内容将会直接输出，也可以是包含运算符的表达式，此类内容将计算结果输出 如果要一次输出多个内容，则可以用英文半角逗号将所输出的内容分隔开 示例如下： 12345678910111213141516171819202122232425262728# 1.使用print函数简单输出a = 10 # 变量a赋值为10b = 20 # 变量b赋值为20print(&#x27;hello world&#x27;) # 输出hello worldprint(a) # 输出10print(&quot;a&quot;) # 输出aprint(a + b) # 输出30# 2.不换行一次输出多个数据a = 10 # 变量a赋值为10b = 20 # 变量b赋值为20print(&#x27;hello world&#x27;, a, b, a + b) # 输出hello world 10 20 30# 3.输出ASCII码所对应的字符print(&quot;b&quot;) # 输出字符bprint(chr(98)) # 输出字符bprint(&quot;C&quot;) # 输出字符Cprint(chr(67)) # 输出字符C# 4.使用print输出中文print(ord(&#x27;北&#x27;)) # 得到&quot;北&quot;的编码为21271（十进制），转为十六进制为：5317print(ord(&#x27;京&#x27;)) # 得到&quot;京&quot;的编码为20140（十进制），转为十六进制为：4eacprint(&#x27;\\u5317\\u4eac&#x27;) # 输出&quot;北京&quot;# 5.使用print函数将内容输出到文件中fp = open(&#x27;demo.txt&#x27;, &#x27;w&#x27;) # 打开文件demo.txt（若无则新建） w--&gt;writeprint(&#x27;hello world&#x27;, file=fp) # 输出&quot;hello world&quot;到文件中fp.close() # 关闭文件 print()函数复杂输出print()函数完整语法结构为： 1print(value,...,sep=&#x27; &#x27;,end=&#x27;\\n&#x27;,file=None) 在pycharm中按住Ctrl键鼠标点击print()方可看到 多条print()输出到一行显示 只需将end设置为其他字符，例如end&#x3D;’ ‘ 使用链接符连接多个字符串 使用“+”连接数值和其他数据类型时，系统默认为加法计算，程序报错。可将数值作为字符串来处理。 示例如下： 12345678910# 6.多条print输出到一行显示print(&#x27;大头&#x27;, end=&#x27;---&gt;&#x27;) # 输出&quot;大头&quot;，并将end中&#x27;\\n&#x27;替换为&#x27;---&gt;&#x27;print(&#x27;真可爱&#x27;) # 输出&quot;真可爱&quot;，同时运行这两行会得到&quot;大头---&gt;真可爱&quot;# 7.使用连接符连接多个字符串print(1234) # 直接输出整数print(3.1415926) # 直接输出浮点数print(1, 2, 3, 4) # 逗号连接，直接输出并用空格连接print(192, 168, 1, 1, sep=&#x27;.&#x27;) # 使用间隔符&quot;.&quot;进行连接,数值之间用&quot;.&quot;进行分割print(&#x27;今年是&#x27; + &#x27;2022&#x27; + &#x27;年&#x27;) # 输出为&quot;今年是2022年&quot; 基本输入函数input()input()简单语法结构为： 1variable = input(&#x27;提示文字&#x27;) 无论用户输入的是字符或数字，input()函数统一按照字符串类型输出 要想接收整型的数字并保存到变量num中，代码如下num=int(input(&#39;请输入你的幸运数字： &#39;)) 1234567# 8.input函数的使用name = input(&#x27;请输入你的姓名：&#x27;) # 输入的字符串赋值于name中print(&#x27;您的姓名是：&#x27; + name) # 输出&quot;您的姓名是：name(指其值)&quot;# 9.输入整数类型的数据num = int(input(&#x27;请输入您的幸运数字：&#x27;)) # 将输入的字符串转换为int型print(&#x27;您的幸运数字为：&#x27;,num) # 此处不能用&quot;+&quot;进行连接，num此时为整数类型，加号会默认运算","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"}]},{"title":"Markdown语法速查表","slug":"我的Markdown笔记","date":"2022-02-01T10:12:06.346Z","updated":"2022-07-16T09:32:37.893Z","comments":true,"path":"43418.html","link":"","permalink":"http://paneersblog.github.io/43418.html","excerpt":"markdown语法速查","text":"markdown语法速查 By Paneer 基本语法标题# H1 % 一级标题 H1## H2 % 二级标题 H2…… ###### H6 % 六级标题 H6换行与段落在markdown中切换段落可以通过连续两个回车来解决，（此处回车 1）（此处回车 1）换行则是在上一句的句末多加两个空格之后（此处空格 2）进行单次回车进行换行操作 粗体**bold text** 斜体*italicized text* 粗+斜体 ***bold &amp; italic*** 引用 引用块 以及嵌套引用 &gt;引用文字 &gt;&gt;嵌套引用 有序列表 first item second item third item % 1.first item 2.second item 3.third item 无序列表 item item item % - item - item - item 代码`code` 另，代码块应在每一行之前至少加四个空格即一个TAB制表符 分割线 --- 链接[链接](paneersblog.github.io) 图片![图片](image.jpg) % 可以在markdown编辑器中预览但不能上传到hexo博客 若要上传至hexo平台，以Emily上传的图片为例 且此时在本地同一文件夹下应有一个与 示例.md 文件同名的文件夹 示例 其中储存有该图片 &#123;% asset_img 我们接吻吧我们不恋爱.jpg 我们接吻吧我们不恋爱 %&#125; %本地无法预览但能上传到hexo博客 扩展语法表格 左对齐 居中 右对齐 1 2 3 text text text | 左对齐 | 居中 | 右对齐 | | :--- | :---: | ---: | | 1 | 2 | 3 | | text | text | text | 代码块1print(&quot;hello world&quot;) % ```python % print(&quot;hello world&quot;) % ``` 脚注Here is a sentence with a footnote.[^1][^1]: This is the footnote. % Here is a sentence with a footnote.[^ 1] % [^ 1]: This is footnote. % 注：去掉^和数字1之间的空格 定义列表(并非所有的编辑器都支持)一个术语该术语的解释一个术语 : 该术语的解释 删除线~~删除线~~ 任务列表 write the note go to bed earlier wake up earlier % - [x] write the note - [ ] go to bed earlier - [ ] wake up earlier 上标和下标a12+b12&#x3D;c12 上标与下标可以使用html中的标签，即&lt;sub&gt;表示下标，&lt;sup&gt;表示上标。 另外，由于markdown语法与html标签是可以共用的，所以说当你在markdown中实现不了的时候不妨试一下html标签。 a&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;+b&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;=c&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt; 数学公式块(会居中显示，可多行)$$i&#x3D;\\sqrt{-1}$$ $$ i=\\sqrt&#123;-1&#125; $$ 插入数学公式$i&#x3D;\\sqrt{-1}$ $i=\\sqrt&#123;-1&#125;$ That is all…对于markdown语法，多用多写两篇笔记就记住了，标记式语言很简单 参考链接：Markdown官方教程","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://paneersblog.github.io/tags/Markdown/"}]},{"title":"我们接吻吧 我们不恋爱","slug":"我们接吻吧-我们不恋爱","date":"2022-01-31T11:29:00.000Z","updated":"2022-07-16T09:32:33.684Z","comments":true,"path":"24896.html","link":"","permalink":"http://paneersblog.github.io/24896.html","excerpt":"我们接吻吧 我们不恋爱","text":"我们接吻吧 我们不恋爱 By Emily","categories":[],"tags":[{"name":"Photo","slug":"Photo","permalink":"http://paneersblog.github.io/tags/Photo/"}]},{"title":"我的Matlab入门笔记","slug":"Matlab","date":"2022-01-30T16:10:57.868Z","updated":"2022-07-16T09:31:53.189Z","comments":true,"path":"19643.html","link":"","permalink":"http://paneersblog.github.io/19643.html","excerpt":"我的Matlab入门笔记","text":"我的Matlab入门笔记 By Paneer 关于注释12%% 这是一行注释（双百分号）% 这也是一行注释（单百分号） 关于变量命名% 变量名不能超过63个字符 1datou = &#x27;keai&#x27; % &#x27; &#x27;之间为字符串，定义datou为keai % 定义矩阵A 空格或逗号隔开，分号换行 1234567A=[1 2 3;3 3 3;4 1 1] A = 1 2 3 3 3 3 4 1 1 % 对矩阵A转置 1234567B=A&#x27; B = 1 3 4 2 3 1 3 3 1 % 将矩阵A按列拉长 12345678910111213C=A(:) C = 1 3 4 2 3 1 3 3 1 % 对矩阵A求逆 1234567D=inv(A) D = -0.0000 -0.1111 0.3333 -1.0000 1.2222 -0.6667 1.0000 -0.7778 0.3333 % 矩阵之间的乘法运算 1234567A*D ans = 1.0000 0 -0.0000 0 1.0000 0 0 0.0000 1.0000 随机数部分% 生成伪随机数，分布在（0-1）之间 1rand % 生成m行n列的均匀分布的伪随机数 1rand(m.n) % 生成指定精度的均匀分布的伪随机数，参数还可为’single’ 1rand(m,n,&#x27;double&#x27;) % 利用指定的 RandStream（随机种子）生成伪随机数 1rand(RandStream,m,n) % 生成标准正态分布的伪随机数（均值为0，方差为1） 1randn % 主要语法同 rand % 生成均匀分布的伪随机数 1randi(n) % 在开区间（1，iMax）生成均匀分布的伪随机数 1r=randi(iMax) % 在开区间（1，iMax）生成m*n型随机矩阵 1r=randi(iMax,m,n) % 在开区间（iMin，iMax）生成m*n型随机矩阵 1r=randi([iMin,iMax],m,n) 元胞数组%% 元胞数组：Matlab中特有的一种数据类型，数组的一种。% 其内部元素可以是属于不同的数据类型。 1A = cell(1,6) 在Matlab中输出为 A = 1×6 cell 数组 列 1 至 3 &#123;0×0 double&#125; &#123;0×0 double&#125; &#123;0×0 double&#125; 列 4 至 6 &#123;0×0 double&#125; &#123;0×0 double&#125; &#123;0×0 double&#125; % matlab索引从1开始，此处为第二个元胞为3x3型 1A&#123;2&#125; = eye(3) % 输出为 A &#x3D; 1×6 cell 数组 列 1 至 3 &#123;0×0 double&#125; &#123;3×3 double&#125; &#123;0×0 double&#125; 列 4 至 6 &#123;0×0 double&#125; &#123;0×0 double&#125; &#123;0×0 double&#125; %% 在Matlab中生成n阶幻方: 1magic(n) % 幻方：三阶幻方为例，指1-9九个数字组成3*3的矩阵使得该矩阵任意横竖斜方向三个数的和总是相同。 1A&#123;5&#125; = magic(5) % 输出为 A = 1×6 cell 数组 列 1 至 3 &#123;0×0 double&#125; &#123;3×3 double&#125; &#123;0×0 double&#125; 列 4 至 6 &#123;0×0 double&#125; &#123;5×5 double&#125; &#123;0×0 double&#125; 结构体1books = struct(&#x27;name&#x27;,&#123;&#123;&#x27;Machine Learning&#x27;,&#x27;Date Mining&#x27;&#125;&#125;,&#x27;price&#x27;,[30 40]) % 可以理解为python中的字典 123books.name %调用books中name这一属性books.name(1) %调用books中第一个name的cellbooks.name&#123;1&#125; %调用books中第一个name的字符串 Matlab矩阵操作1.矩阵的定义与构造% 构造一个一行六列的矩阵 A = [1 2 3 4 5 6] % 构造1-9区间内步长为3的矩阵即：B &#x3D; 1 4 7 B = 1:3:9 %将B矩阵重复，化为3行1列的分块矩阵C，每一块都是矩阵B C = repmat(B,3,1) % 生成一个2行4列的每个值都是1的矩阵 D = ones(2,4) 2.矩阵的四则运算12345678A = [1 2 3 4; 5 6 7 8]B = [1 1 2 2; 2 2 1 1]C = A + BD = A - BE = A * B&#x27; % A矩阵与B矩阵的转置相乘F = A .* B % A矩阵与B矩阵所对应的项相乘G = A / B % G * B = A 即 G = A * inv(B) （B的逆）H = A ./ B % A矩阵与B的逆矩阵对应项相乘 3.矩阵的下标12345A = magic(5) % 生成5阶幻方B = A(2,3) % 将矩阵A的第二列第三行元素赋值给BC = A(3,:) % 将矩阵A的第三行赋值给CD = A(:,4) % 将矩阵A的第四列赋值给D[m, n] = find(A &gt; 20) % 寻找A中大于20的值，并将其行数列数分别赋值给 m、n 程序结构循环结构for循环：步长默认为1，可省略。其余符合数学逻辑即可% for 循环变量 = 初值：步长：终值 % 执行语句 1 % …… % 执行语句 n % end 示例： 1234sum = 0;for n = 1:5sum = sum + n^2end % 输出得sum为55 % for循环求i!的累加，i&#x3D;1:5 12345678sum = 0;for i =1:5; p=1; for j = 1:i; p = p*j; end sum =sum+p;end while循环 当表达式为真时进入循环，为假时执行end之后的语句 % while 条件表达式 % 执行语句1 % ... % 执行语句n % end % 求1+2+3+4+5+…+10的和 123456s = 0;n = 1;while n&lt;=10 s = s+n; n = n+1;end 分支结构1. if…end 结构% 该结构只有一个判断语句，当条件表达式为真时，执行该语句；反之执行end后的语句 % if 条件表达式 % ... % 语句体 % ... % end % 满足条件时显示”成立” 12345a = 100;b = 10;if a&gt;b &#x27;成立&#x27;end % 输出ans = 成立 2.if…else…end结构% 若表达式为真，则执行语句体1，否则执行语句体2 % if 表达式 % 语句体1 % else % 语句体2 % end 3.switch…case…end结构% switch后表达式的值或字符串与case后的值或字符串进行比较，与哪一个case相同则执行哪一个case下的语句体。 % 若所有的case的值都不相同，则执行otherwise后的语句体。 % switch 表达式（数值or字符串） % case 数值或字符串1 % 语句体1; % case 数值或字符串2 % 语句体2; % ... % otherwise % 语句体n； % end 二维平面绘图12345678x = 0:0.01:2*pi;y = sin(x);figure % 建立一个幕布，有时可省略plot(x,y) % 画图命令title(&#x27;y=sin(x)&#x27;) % 图像标题xlabel(&#x27;x&#x27;) % x轴标题ylabel(&#x27;sin(x)&#x27;) % y轴标题xlim([0 2*pi]) % Matlab默认会另x范围增大，加上此语句可避免 % 颜色选项参数 红 绿 蓝 黄 粉 青 白 黑 r g b y m c w k % 线性选项参数 实线 虚线 冒号线 点画线 - – ： -。 ——————————— ———– ··· ··· ··· -·-·-·-·-·- % 数据标记点选项参数 点 十字号 圆圈 星号 叉号 正方形 菱形 上三角 下三角 左三角 · + o * x s d ^ v &lt; % 例子 1234567891011x = 0:0.01:20;y1 = 200*exp(-0.05*x).*sin(x);y2 = 0.8*exp(-0.5*x).*sin(10*x);figure[AX,H1,H2] = plotyy(x,y1,x,y2,&#x27;plot&#x27;);set(get(AX(1),&#x27;ylabel&#x27;),&#x27;string&#x27;,&#x27;Slow Decay&#x27;) % y1轴命名set(get(AX(2),&#x27;ylabel&#x27;),&#x27;string&#x27;,&#x27;Fast Decay&#x27;) % y2轴命名xlabel(&#x27;Time(\\musec)&#x27;) % X轴命名title(&#x27;Multiple Decay Rates&#x27;)set(H1,&#x27;linestyle&#x27;,&#x27;--&#x27;) % 设置y1的线型set(H2,&#x27;linestyle&#x27;,&#x27;-.&#x27;) % 设置y2的线型 三维平面绘图12345678t = 0:pi/50:10*piplot3(sin(t),cos(t),t) % 三维绘图使用plot3，二维为plotxlabel(&#x27;sin(t)&#x27;)ylabel(&#x27;cos(t)&#x27;)zlabel(&#x27;t&#x27;)% hold on % 在同一张幕布下保持住，继续添加其他图像，hold off则是不保存清除幕布进行绘制grid on % 在绘制的幕布中添加网格线axis square % 将幕布的坐标变为一个正方形，美化图像 %% 图形窗口分割 1234567891011121314151617x = linspace(0,2*pi,60) % 定义一个xsubplot(2,2,1) % 将画布分为两行两列四块，在第1块上绘图plot(x,sin(x)-1);title(&#x27;sin(x)-1&#x27;);axis([0,2*pi,-2,0]) % 规定范围subplot(2,1,2) % 将画布分为两行一列两块，在第2块上绘图plot(x,cos(x)+1);title(&#x27;cos(x)+1&#x27;);axis([0,2*pi,0,2])subplot(4,4,3) % 将画布分为四行四列16块，在第3块上绘图plot(x,tan(x));title(&#x27;tan(x)&#x27;);axis([0,2*pi,-40,40])subplot(4,4,8) % 将画布分为四行四列16块，在第8块上绘图plot(x,cot(x));title(&#x27;cot(x)&#x27;);axis([0,2*pi,-35,35]) %% 完结撒花 1234% peaks &amp; mesh[x,y,z] = peaks(40)mesh(x,y,z)grid 参考视频地址：https://www.bilibili.com/video/BV13D4y1Q7RS?p=15&amp;share_source=copy_web","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Matlab","slug":"Matlab","permalink":"http://paneersblog.github.io/tags/Matlab/"}]},{"title":"myfirstBlog","slug":"myfirstBlog","date":"2022-01-26T09:42:30.000Z","updated":"2022-02-08T14:13:04.774Z","comments":true,"path":"14595.html","link":"","permalink":"http://paneersblog.github.io/14595.html","excerpt":"test.Hello world!这是我的第一篇博客。","text":"test.Hello world!这是我的第一篇博客。 by Paneer","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-01-26T05:22:21.023Z","updated":"2022-02-08T14:13:04.772Z","comments":true,"path":"16107.html","link":"","permalink":"http://paneersblog.github.io/16107.html","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://paneersblog.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"软件学习","slug":"软件学习","permalink":"http://paneersblog.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/"},{"name":"英语学习","slug":"英语学习","permalink":"http://paneersblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"},{"name":"测试页","slug":"测试页","permalink":"http://paneersblog.github.io/categories/%E6%B5%8B%E8%AF%95%E9%A1%B5/"},{"name":"攻略","slug":"攻略","permalink":"http://paneersblog.github.io/categories/%E6%94%BB%E7%95%A5/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://paneersblog.github.io/tags/Python/"},{"name":"MCNP5","slug":"MCNP5","permalink":"http://paneersblog.github.io/tags/MCNP5/"},{"name":"WordList_P","slug":"WordList-P","permalink":"http://paneersblog.github.io/tags/WordList-P/"},{"name":"SRIM","slug":"SRIM","permalink":"http://paneersblog.github.io/tags/SRIM/"},{"name":"DOS","slug":"DOS","permalink":"http://paneersblog.github.io/tags/DOS/"},{"name":"Linux","slug":"Linux","permalink":"http://paneersblog.github.io/tags/Linux/"},{"name":"WordList_E","slug":"WordList-E","permalink":"http://paneersblog.github.io/tags/WordList-E/"},{"name":"Trip","slug":"Trip","permalink":"http://paneersblog.github.io/tags/Trip/"},{"name":"Markdown","slug":"Markdown","permalink":"http://paneersblog.github.io/tags/Markdown/"},{"name":"Photo","slug":"Photo","permalink":"http://paneersblog.github.io/tags/Photo/"},{"name":"Matlab","slug":"Matlab","permalink":"http://paneersblog.github.io/tags/Matlab/"}]}